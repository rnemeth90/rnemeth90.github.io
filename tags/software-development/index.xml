<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Development on GeekyRyan</title><link>https://rnemeth90.github.io/tags/software-development/</link><description>Recent content in Software Development on GeekyRyan</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 05 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://rnemeth90.github.io/tags/software-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes Health Probing in Dotnet Console Apps</title><link>https://rnemeth90.github.io/posts/2024-12-05-dotnet-console-app-health-probe/</link><pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2024-12-05-dotnet-console-app-health-probe/</guid><description>&lt;h1 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;This post covers a simple and efficient solution for implementing liveness probes in pods running console applications (think background services or utility DaemonSets). A common question I see in Kubernetes forums is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;“How do I use health probes with console apps?”
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The typical responses often suggest:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sidecar Container with HTTP Server: Requires coding the server, building a sidecar container, and managing additional infrastructure. While effective, this can be overkill for lightweight applications.&lt;/li&gt;
&lt;li&gt;Exec Probes with Shell Scripts: Feels hacky and can waste resources, depending on what the script does.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pods are meant to be lightweight, and both solutions can deviate from that principle.&lt;/p&gt;</description></item><item><title>Mounting Multiple Kubernetes Secrets into One Directory</title><link>https://rnemeth90.github.io/posts/2024-06-29-mount-multiple-kubernetes-secrets-into-one-directory/</link><pubDate>Sat, 29 Jun 2024 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2024-06-29-mount-multiple-kubernetes-secrets-into-one-directory/</guid><description>&lt;h1 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Combining multiple Kubernetes secrets into a single directory can streamline secret management in your applications. This guide walks you through the process of achieving this in Kubernetes, ensuring efficient and organized secret management.&lt;/p&gt;
&lt;h1 id="creating-secrets"&gt;
 Creating Secrets
 &lt;a class="heading-link" href="#creating-secrets"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;First, create your secrets using the &lt;code&gt;kubectl create secret&lt;/code&gt; command:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;kubectl create secret generic secret-one --from-literal=key1=value1
kubectl create secret generic secret-two --from-literal=key2=value2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each secret can contain multiple key-value pairs, and you can add more secrets as needed.&lt;/p&gt;</description></item><item><title>Detecting MIME Types in Go</title><link>https://rnemeth90.github.io/posts/2024-03-27-golang-detect-file-type/</link><pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2024-03-27-golang-detect-file-type/</guid><description>&lt;h1 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Knowing the type of a file you&amp;rsquo;re working with is not just a matter of curiosity — it&amp;rsquo;s often a necessity. This is especially true when you&amp;rsquo;re deciding whether or not a particular operation can be carried out on that file. Go, with its comprehensive standard library, offers a straightforward approach to identifying a file&amp;rsquo;s MIME type, ensuring that developers have the tools they need to make informed decisions about file manipulation. You may expect to find this functionality in the &lt;code&gt;file&lt;/code&gt; package, but you&amp;rsquo;d be wrong! Read on&amp;hellip;&lt;/p&gt;</description></item><item><title>Validating URLs with Go</title><link>https://rnemeth90.github.io/posts/2023-12-12-golang-url-validation/</link><pubDate>Tue, 19 Dec 2023 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2023-12-12-golang-url-validation/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll take a quick look at URL validation using Golang. It&amp;rsquo;s common to implement URL validation as a task within a HTTP request pipeline, typically as middleware. There are many different definitions of &amp;ldquo;validation&amp;rdquo;. For the purpose of this article, we will simply validate that a URL conforms to a particular text pattern.&lt;/p&gt;
&lt;p&gt;I often see people (mistakenly) use URL and URI interchangeably. URL is actually is a sub-type of URI. A URL is a reference to a web resource, typically seen as a web address (e.g. &lt;a href="https://golang.org/project/%29" class="external-link" target="_blank" rel="noopener"&gt;https://golang.org/project/)&lt;/a&gt;. A URI, on the other hand, can be used to identify any type of resource, not just those on the internet.&lt;/p&gt;</description></item><item><title>Using try/catch/finally Blocks in PowerShell</title><link>https://rnemeth90.github.io/posts/2023-08-15-powershell-try-catch/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2023-08-15-powershell-try-catch/</guid><description>&lt;p&gt;Despite being a great language, PowerShell is not impervious to errors. Errors that occur within your code can stop it&amp;rsquo;s execution or even cause unexpected changes in the resources that your script is managing. Learning to handle these errors gracefully is the foundation of defensive coding. Today, we&amp;rsquo;ll take a quick look at how PowerShell handles errors with Try-Catch-Finally blocks. They allow you to gracefully handle errors and perform cleanup operations, ensuring that your script doesn&amp;rsquo;t crash when the unexpected occurs. We&amp;rsquo;ll then cover the differences in terminating and non-terminating errors and why you should take these into consideration when implementing error handling.&lt;/p&gt;</description></item><item><title>Golang: When Identical Strings are Not Equal</title><link>https://rnemeth90.github.io/posts/2023-01-24-golang-strings-not-equal/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2023-01-24-golang-strings-not-equal/</guid><description>&lt;p&gt;&lt;em&gt;This will be a quick and dirty post, so please forgive any spelling/grammar mistakes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I was writing a little CLI tool in Golang to track todo items. Just a dumb little app to help hone my skills a bit, but still something useful that serves a purpose to me. I don&amp;rsquo;t write a ton of code at work (mostly just scripting/pipelines when I do), so I&amp;rsquo;m constantly working on something like this in my spare time. Anyway, I was writing this app, got everything working like I wanted it to. I then wrote some of the tests and was iterating over them. I noticed the &lt;code&gt;ListTasks&lt;/code&gt; test was failing:&lt;/p&gt;</description></item><item><title>Handling Graceful Shutdown in a .NET App Hosted in Kubernetes</title><link>https://rnemeth90.github.io/posts/2022-12-28-graceful-shutdown-in-kubernetes-dotnet-pod/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-12-28-graceful-shutdown-in-kubernetes-dotnet-pod/</guid><description>&lt;p&gt;I was recently involved with troubleshooting some API&amp;rsquo;s hosted in Kubernetes throwing http/502&amp;rsquo;s. This was incredibly difficult to diagnose because it seemingly happened at random, and I had never encountered anything like this. Being that I had never dealt with this in the past, and I (nor my team) was able to figure it out within a reasonable amount of time, I turned to google. My searches resulted in various blogs and SO posts of other people experiencing similar issues, but none of their resolutions worked for us. It was actually a combination of these blogs (and the resolutions posted) that ended up resolving our issue.&lt;/p&gt;</description></item></channel></rss>