<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on GeekyRyan</title><link>https://rnemeth90.github.io/tags/ci/cd/</link><description>Recent content in CI/CD on GeekyRyan</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 23 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://rnemeth90.github.io/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Golang App with Github Actions</title><link>https://rnemeth90.github.io/posts/2022-12-24-gh-actions-copy/</link><pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-12-24-gh-actions-copy/</guid><description>&lt;p&gt;In this article, we&amp;rsquo;ll take a quick look at building a Golang app with Github actions. This process can be applied to just about any app
written in any language though. We&amp;rsquo;ll cover the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What are github actions?&lt;/li&gt;
&lt;li&gt;Setting up the workflow to build, test, and deploy a binary&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Github Actions is a cross-platform CI/CD pipeline that allows you to build, test, package, and release your software. Actions can be triggered manually or based on events that happen within your Github repo. They are powerful and I suggest you read more at the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions" class="external-link" target="_blank" rel="noopener"&gt;Official Docs&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Continuous Deployment Models</title><link>https://rnemeth90.github.io/posts/2022-01-14-continuous-deployment-models/</link><pubDate>Fri, 14 Jan 2022 19:24:01 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-01-14-continuous-deployment-models/</guid><description>&lt;p&gt;When deploying new software releases to servers or (insert -as-a-service&amp;gt; here), it’s a good idea to either deploy the releases in a controlled manner or to have a quick rollback plan. This article will be diving into blue/green deployments, canary deployments, ring-based deployments, and feature tag deployments.&lt;/p&gt;
&lt;h2 id="bluegreen-deployments"&gt;
 Blue/Green Deployments
 &lt;a class="heading-link" href="#bluegreen-deployments"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Blue/green deployments are a deployment model where a new application version never gets deployed to the production servers (green) directly. Instead, it gets deployed to another set of servers (blue) first. Since the blue servers are not currently serving any traffic for users, the deployment has no impact. However, once the deployment has been completed successfully and tested, users will be directed to the new deployment (blue). You can control all user traffic or a subset of user traffic if your load balancer supports it (referred to as ‘Progressive Exposure’).&lt;/p&gt;</description></item></channel></rss>