<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scripts on GeekyRyan</title><link>https://rnemeth90.github.io/tags/scripts/</link><description>GeekyRyan (Scripts)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 Oct 2016 03:03:00 +0000</lastBuildDate><atom:link href="https://rnemeth90.github.io/tags/scripts/index.xml" rel="self" type="application/rss+xml"/><item><title>Script to Move All Disabled AD Objects to a Specified OU</title><link>https://rnemeth90.github.io/posts/2016-10-06-script-to-move-all-disabled-ad-objects-to-a-specified-ou/</link><pubDate>Thu, 06 Oct 2016 03:03:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2016-10-06-script-to-move-all-disabled-ad-objects-to-a-specified-ou/</guid><description>&lt;p>The title says it all. This script will move all disabled AD objects to a specified OU. This script accepts parameters that will allow you to specify whether you want to move Users or Computers and the destination OU. It also accepts a “test mode” parameter that will run the script and output the results, without actually modifying Active Directory.&lt;/p>
&lt;p>This is revision 1 of the script. There are still several improvements I would like to make, including better error handling and recovery.&lt;/p>
&lt;p>If you have any suggestions or requests, please leave a comment.&lt;/p>
&lt;p>&lt;a href="https://drive.google.com/open?id=0B2K6VOnt6zeXMVFleWZISHZBTnc">Download Here&lt;/a>&lt;/p></description></item><item><title>Script for Setting the License for Multiple Office 365 User Accounts</title><link>https://rnemeth90.github.io/posts/2016-04-11-script-for-setting-the-license-for-multiple-office-365-user-accounts/</link><pubDate>Mon, 11 Apr 2016 01:25:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2016-04-11-script-for-setting-the-license-for-multiple-office-365-user-accounts/</guid><description>&lt;p>A script for setting the Office 365 license for multiple users. Requires a CSV file named users.csv. This file must in the same directory as the script. The CSV file must contain three columns. The title of the columns should be UPN, UsageLocation, and SKU.&lt;/p>
&lt;p>&lt;a href="https://drive.google.com/open?id=0B2K6VOnt6zeXZ2Z6OFZhZVoyenc">BulkSet-MsolUserLicense.ps1&lt;/a>&lt;/p></description></item><item><title>Script for Querying All AD Computers Time Source</title><link>https://rnemeth90.github.io/posts/2015-09-01-script-for-querying-all-ad-computers-time-source/</link><pubDate>Tue, 01 Sep 2015 21:05:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2015-09-01-script-for-querying-all-ad-computers-time-source/</guid><description>&lt;p>This script will iterate through all computers in Active Directory and return the configured time server for each computer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Powershell" data-lang="Powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> .&lt;/span>&lt;span style="color:#e6db74">SYNOPSIS&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Get time source for all computers in domain
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> .&lt;/span>&lt;span style="color:#e6db74">EXAMPLE&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Get-TimeSource
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> .&lt;/span>&lt;span style="color:#e6db74">NOTES&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Author: Ryan Nemeth - RyanNemeth@live.com
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Site: http://www.geekyryan.com
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> .&lt;/span>&lt;span style="color:#e6db74">LINK&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> http://www.geekyryan.com
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> .&lt;/span>&lt;span style="color:#e6db74">DESCRIPTION&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> This function will iterate through all computers/servers in a domain and return the time source
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> for each.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Write-Host -foregroundcolor Red -BackgroundColor black &lt;span style="color:#e6db74">&amp;#34;This script must be run on a domain controller and requires that the AD Powershell module be installed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$module = Get-Module -ListAvailable | Select-Object -ExpandProperty Name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>($module &lt;span style="color:#f92672">-notcontains&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ActiveDirectory&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Write-Host -foregroundcolor red -backgroundcolor black &lt;span style="color:#e6db74">&amp;#34;***Active Directory Powershell Module Not Found***&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Write-Host -foregroundcolor yellow &lt;span style="color:#e6db74">&amp;#34;Found Active Directory Powershell Module. Importing...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Import-Module ActiveDirectory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$computers = get-adcomputer -filter * | Select-Object -ExpandProperty Name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span>($computer &lt;span style="color:#66d9ef">in&lt;/span> $computers) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $tm_source = w32tm /query /computer&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>$computer /source
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> write-host &lt;span style="color:#e6db74">&amp;#34;The time source for&amp;#34;&lt;/span> $computer &lt;span style="color:#e6db74">&amp;#34;is&amp;#34;&lt;/span> $tm_source
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://github.com/rnemeth90/PowerShell/blob/master/NTP/Get-TimeSource.ps1" alt="">&lt;/p></description></item><item><title>Ping Sweeping with FPing</title><link>https://rnemeth90.github.io/posts/2015-03-09-ping-sweeping-with-fping/</link><pubDate>Mon, 09 Mar 2015 01:08:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2015-03-09-ping-sweeping-with-fping/</guid><description>&lt;p>I generally use NMAP for any type of host discovery, but recently started experimenting with FPing. One thing I found is that, when performing a ping sweep, not only do I see the hosts that replied to the ping, but FPing also sends any unreachable IP addresses to stdout (which is super annoying and ugly if you ask me…).&lt;/p>
&lt;p>&lt;a href="https://rnemeth90.github.io/wp-content/uploads/2015/03/2015-03-08_21h04_50.png">&lt;img src="https://rnemeth90.github.io/wp-content/uploads/2015/03/2015-03-08_21h04_50.png" alt="">&lt;/a>&lt;/p>
&lt;p>Anyway, after a bit of research, I found a nifty way to suppress these messages. Linux allows us to redirect all error messages to /dev/null. So instead of just running the vanilla fping -a -g…. you would run the program and output all error messages /dev/null, like so:&lt;/p>
&lt;p>&lt;a href="https://rnemeth90.github.io/wp-content/uploads/2015/03/2015-03-08_21h07_14.png">&lt;img src="https://rnemeth90.github.io/wp-content/uploads/2015/03/2015-03-08_21h07_14.png" alt="">&lt;/a>&lt;/p></description></item><item><title>Powershell: SID to Username</title><link>https://rnemeth90.github.io/posts/2014-12-08-powershell-sid-to-username-powershell-sid-to-username/</link><pubDate>Mon, 08 Dec 2014 13:43:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2014-12-08-powershell-sid-to-username-powershell-sid-to-username/</guid><description>&lt;p>This is a simple script to convert a SID to a username&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Powershell" data-lang="Powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Returns a username based on a SID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Author: Ryan Nemeth&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Date: 12/2/2014&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$SID = read-host &lt;span style="color:#960050;background-color:#1e0010">“&lt;/span>Please enter the SID&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$object = New-Object System.Security.Principal.SecurityIdentifier($SID)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$User = $object.Translate( \[System.Security.Principal.NTAccount\])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>write-host &lt;span style="color:#960050;background-color:#1e0010">“&lt;/span>The user is&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">”&lt;/span> $User.Value
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>