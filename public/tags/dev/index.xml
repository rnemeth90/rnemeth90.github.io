<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev on GeekyRyan</title>
    <link>http://localhost:1313/tags/dev/</link>
    <description>Recent content in Dev on GeekyRyan</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 06 Sep 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use “replace” in go.mod to Point to a Local Module</title>
      <link>http://localhost:1313/posts/2022-09-06-go-mod-replace-copy/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-09-06-go-mod-replace-copy/</guid>
      <description>If you want to the local version of a dependency in Go rather than one in a remote repository, use the replace keyword.&#xA;The replace line goes above your require statements, like so:&#xA;module github.com/rnemeth90/foo replace github.com/rnemeth90/bar =&amp;gt; /Users/rnemeth90/Projects/bar require ( github.com/rnemeth90/bar v1.0.0 ) Now when you compile this module go build or go install, it will use your local code rather than the remote dependency.&#xA;According to the docs, you do need to make sure that the code you’re pointing to also has a go.</description>
    </item>
    <item>
      <title>Powershell for Devops - Querying REST APIs with Powershell</title>
      <link>http://localhost:1313/posts/2022-08-04-querying-rest-with-powershell/</link>
      <pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-08-04-querying-rest-with-powershell/</guid>
      <description>This will be a short post on querying REST APIs with Powershell.&#xA;It&amp;rsquo;s hard to argue that REST APIs are the predominant technology for interacting with networked services. They provide a gateway for interacting with a 3rd party (or self-hosted) product without having to go through the exercise of a more complicated integration. REST APIs communicate in a common format, typically JSON. However, most will allow us to choose the response format by specifying an option in the &amp;lsquo;Accept&amp;rsquo; header.</description>
    </item>
    <item>
      <title>Reading Json Files with Go</title>
      <link>http://localhost:1313/posts/2022-07-21-reading-json-files-with-go/</link>
      <pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-07-21-reading-json-files-with-go/</guid>
      <description>JSON is a widely used format for representing structured data. Developers like it because it is easy to read, most common languages have a library for interacting with it, and most public APIs accept JSON in HTTP requests.&#xA;In this post, we&amp;rsquo;ll look at parsing a JSON file using Go! We will be using the io/ioutil package to open a json file on local disk, and encoding/json to parse the JSON data within the file into a memory structure.</description>
    </item>
  </channel>
</rss>
