<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on GeekyRyan</title>
    <link>http://localhost:1313/tags/powershell/</link>
    <description>Recent content in PowerShell on GeekyRyan</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 15 Aug 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using try/catch/finally Blocks in PowerShell</title>
      <link>http://localhost:1313/posts/2023-08-15-powershell-try-catch/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-08-15-powershell-try-catch/</guid>
      <description>Despite being a great language, PowerShell is not impervious to errors. Errors that occur within your code can stop it&amp;rsquo;s execution or even cause unexpected changes in the resources that your script is managing. Learning to handle these errors gracefully is the foundation of defensive coding. Today, we&amp;rsquo;ll take a quick look at how PowerShell handles errors with Try-Catch-Finally blocks. They allow you to gracefully handle errors and perform cleanup operations, ensuring that your script doesn&amp;rsquo;t crash when the unexpected occurs.</description>
    </item>
    <item>
      <title>Powershell for Devops - Querying REST APIs with Powershell</title>
      <link>http://localhost:1313/posts/2022-08-04-querying-rest-with-powershell/</link>
      <pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-08-04-querying-rest-with-powershell/</guid>
      <description>This will be a short post on querying REST APIs with Powershell.&#xA;It&amp;rsquo;s hard to argue that REST APIs are the predominant technology for interacting with networked services. They provide a gateway for interacting with a 3rd party (or self-hosted) product without having to go through the exercise of a more complicated integration. REST APIs communicate in a common format, typically JSON. However, most will allow us to choose the response format by specifying an option in the &amp;lsquo;Accept&amp;rsquo; header.</description>
    </item>
    <item>
      <title>Remove Kubernetes Namespace Stuck in the Terminating State</title>
      <link>http://localhost:1313/posts/2022-06-04-remove-kubernetes-namespace-stuck-in-the-terminating-state/</link>
      <pubDate>Sat, 04 Jun 2022 18:29:41 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-06-04-remove-kubernetes-namespace-stuck-in-the-terminating-state/</guid>
      <description>In this post, we will discuss how to remove a Kubernetes namespace that is stuck in the ‘terminating’ state.&#xA;A namespace is like a container. You can use it to store related objects in a Kubernetes environment. Maybe you are hosting a blog in Kubernetes. This blog will likely have a database, a frontend website, a load balancer (service) to spread the incoming traffic among ‘x’ number of frontend containers (pods), and maybe some middle-tier or utility applications.</description>
    </item>
  </channel>
</rss>
