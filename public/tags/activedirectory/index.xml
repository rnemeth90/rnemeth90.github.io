<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ActiveDirectory on GeekyRyan</title>
    <link>https://rnemeth90.github.io/tags/activedirectory/</link>
    <description>GeekyRyan (ActiveDirectory)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Nov 2020 16:31:00 +0000</lastBuildDate>
    
    <atom:link href="https://rnemeth90.github.io/tags/activedirectory/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Azure AD Sync &amp;#8211; Set-MsolDirSyncEnabled : You cannot turn off Active Directory synchronization.</title>
      <link>https://rnemeth90.github.io/posts/2020-11-26-azure-ad-sync-set-msoldirsyncenabled/</link>
      <pubDate>Thu, 26 Nov 2020 16:31:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2020-11-26-azure-ad-sync-set-msoldirsyncenabled/</guid>
      <description>&lt;p&gt;I recently ran into a situation in my lab environment that required I resync all (2000+) user accounts to Azure AD. Though this sounds complex and daunting, its actually quite simple. T&lt;/p&gt;
&lt;p&gt;The basic steps involve disabling sync, and then removing the user objects. This can all be done with two PowerShell commands:&lt;/p&gt;
&lt;p&gt;1) Set-MsolDirSyncEnabled -EnableDirSync $false&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-rGK18FXw7ns/X7_WthQR0CI/AAAAAAAAyCM/gg7MsY2fcVIcWMMbvxYzPpbpPyKwgHP8ACLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/11/image.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2) Get-MsolUser -All | Remove-MsolUser -force&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-miyfN7OISGo/X7_WzDCc6iI/AAAAAAAAyCQ/PtHURTTVMQ4uypzO7L1UaLfyEs0fpYGdACLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/11/image-1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The account that you are currently running the commands as will not be removed.&lt;/p&gt;
&lt;p&gt;To enable Azure AD Sync, you simply reverse the boolean operation on the Set-MsolDirSyncEnabled cmdlet above. However, I ran into an issue when trying to enable Azure AD Sync.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-R1TPVgYaEBE/X7_XM5_ljKI/AAAAAAAAyCY/VIJZnlgNEPQbhL9p3D0J3XsekBrGiNS3QCLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/11/image-2.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After some research, it turns out you must wait a period of time (up to 12 hours in some cases) before you can make a second change to the Azure AD Sync status. This error simply means that we made a recent change to Azure AD Sync, and we must wait before making another change. To prove this, there is a “DirectorySynchronizationStatus” member for the Get-MsolCompanyInformation cmdlet. If we take a look at this member, we can see the status is “PendingDisabled”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-0OBwKDDD5xQ/X7_X1bBxXjI/AAAAAAAAyCk/FyRlaMpCDT4aBe08TL_8sLiwUBnHkcPJQCLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/11/image-3.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check the status of this periodically over the next 12 hours or so, and once it says “Enabled” or “Disabled”, you should be able to change the state once more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploy a New ADDS Forest on Server 2019 Core</title>
      <link>https://rnemeth90.github.io/posts/2020-10-31-deploy-new-adds-forest-on-server-2019/</link>
      <pubDate>Sat, 31 Oct 2020 01:02:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2020-10-31-deploy-new-adds-forest-on-server-2019/</guid>
      <description>&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;p&gt;Change server name and IP address
Configure time settings and NTP&lt;/p&gt;
&lt;p&gt;In this post we will be reviewing the basic installation of the Active Directory Domain Services role and setup of a new forest on Windows Server Core 2019.&lt;/p&gt;
&lt;p&gt;To get started, login to your server with administrator privileges. You will first need to type in “powershell” in the cmd prompt to start powershell. Once you do that, type in the following command to install the Active Directory Domain Services role:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-LnSTbXjG2Hc/X5y3R3F-eWI/AAAAAAAAx2A/lWQBpA44Dmo-Jpbck2iPmgibU6z0DM1YwCLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-12.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After installing the role, we’ll continue by creating a new ADDS Forest and promoting this server to the primary domain controller.&lt;/p&gt;
&lt;p&gt;First, we’ll need to gather a password. This password will not be used for a domain user account. The local administrator on this server will become the domain administrator account for the domain. The password we’re gathering in the next step will be used for Directory Services Restore Mode (DSRM). DSRM is a recovery mode used to recover domain controllers that won’t boot up. We technically only need a password, not a username for this account.&lt;/p&gt;
&lt;p&gt;Type in the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$cred = Get-Credential
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the username field for the credentials prompt below, just type in anything you want, as the value will not be used. This prompt will store our username/password in a variable object. We can then access the password within the credential object by typing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$cred.password
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that this password is stored as a secure string object. Let’s continue on with the Directory Services installation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-n-W0yvwr2Zs/X5y3X64NjZI/AAAAAAAAx2E/rx5urA7p_NMl3peX5g0J7Ax7biWwNADAgCLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-13.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-0k-aZrMhyGw/X5y3ckH10pI/AAAAAAAAx2I/FS56uvXCirAaBHKwWmIRQ4xIGU_jp_GFwCLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-14.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once we have our credential variable, we can install a new forest and domain controller using the command below. Let us break down what this cmd is doing:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-OF_HVfCPZIM/X5y3ijEA5YI/AAAAAAAAx2M/0vMV3CJczT8D3q5x8hzPAZVSL5DycplBACLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-15.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install-ADDSForest: The powershell cmdlet to create a new forest and domain controller&lt;/p&gt;
&lt;p&gt;-DomainName: The domain name to be used for the forest&lt;/p&gt;
&lt;p&gt;-DomainNetBiosName: The domain “Short name” to be used for the forest. This is the value used when you type in a username in the domainusername format. Example “myDomainbgates”.&lt;/p&gt;
&lt;p&gt;-SafeModeAdministratorPassword: The value we captured in our credential prompt above. This is used for Directory Services Restore Mode. This mode can be accessed by pressing F8 while the server is booting. It is commonly used for recovering a failed domain controller.&lt;/p&gt;
&lt;p&gt;-DatabasePath: The path for the Active Directory database. It’s a best practice to put this database on its own disk.&lt;/p&gt;
&lt;p&gt;-LogPath: The directory for ADDS log files&lt;/p&gt;
&lt;p&gt;-DomainMode: The domain functional level. The domain functional level specifies the attributes and capabilities available to objects within the domain. The higher the level you choose, the more features will be available to you.&lt;/p&gt;
&lt;p&gt;-ForestMode: The forest functional level. Similar to the domain functional level but applies to the entire forest.&lt;/p&gt;
&lt;p&gt;-InstallDNS: Install the DNS role alongside the ADDS role.&lt;/p&gt;
&lt;p&gt;-WhatIf: This is a powershell “thing”. Most cmdlets have the “whatif” parameter. It basically allows you to run the cmdlet in “test” mode without actually making any changes to your environment. Once you’re happy with the output, you can remove the “whatif” parameter and run the command to install ADDS and promote this server to a domain controller.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Active Directory Migration Toolkit &amp;#8211; The RPC Server is Unavailable (hr=0x800706ba)</title>
      <link>https://rnemeth90.github.io/posts/2018-08-21-active-directory-migration-toolkit-rpc/</link>
      <pubDate>Tue, 21 Aug 2018 17:34:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2018-08-21-active-directory-migration-toolkit-rpc/</guid>
      <description>&lt;p&gt;When migrating computer objects using the Active Directory Migration Tool, you may encounter the following error:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/08/2018-08-03_11h20_09.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/08/2018-08-03_11h20_09.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In addition, the Migration Log may show the following error:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/08/2018-08-03_11h20_20.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/08/2018-08-03_11h20_20.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is typically caused by a host-side firewall. To resolve this, deploy a GPO to disable the Windows firewall prior to migrating the computer account. I like to create a special OU for computers (I typically name it “PreMigration”) that I will move computer objects to prior to migrating them. This OU will have two policies applied. One to disable the Windows Firewall and another to start the Remote Registry service. Both are required for the computer object to successfully migrate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure AD Connect No-Start-Connection</title>
      <link>https://rnemeth90.github.io/posts/2018-07-26-azure-ad-connect-no-start-connection/</link>
      <pubDate>Thu, 26 Jul 2018 12:22:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2018-07-26-azure-ad-connect-no-start-connection/</guid>
      <description>&lt;p&gt;This morning, I ran into an issue with Azure AD Connect that I had never seen before. I received an email alert from Azure AD stating that Password Synchronization was not working for my forest, and the suggested fix was to restart the ADSync service on the server. I restarted the service and then forced a sync to verify it was working.&lt;/p&gt;
&lt;p&gt;After forcing the sync, I opened miisclient and noticed some strange errors. We sync multiple on-prem AD forests to Azure AD, and the status for one of them was “no-start-connection”. That error in itself does not seem significant to me. However, after clicking on the “failed-connection” link in the Connection Status pane, things became much more clear.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-26_08h03_05.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-26_08h03_05.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-26_08h03_18.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-26_08h03_18.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The domain controllers for the forest in question are in a datacenter that is geographically separated from the datacenter that our Azure AD Sync server lives in. The two sites are connected via a S2S VPN.&lt;/p&gt;
&lt;p&gt;There was obviously some type of connection issue between our two datacenters. In my case, the issue was transient, and resolved itself after a few minutes. But if you’re experiencing this error message, check your L2/L3 connection. Also, verify DNS is working and someone didn’t make changes to your firewall(s). Just walk up or down the OSI model and you’ll eventually find the problem.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure AD Connect Health: Latest Data is not Available in Azure Portal</title>
      <link>https://rnemeth90.github.io/posts/2018-07-18-azure-ad-connect-health-latest-data-is/</link>
      <pubDate>Wed, 18 Jul 2018 16:38:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2018-07-18-azure-ad-connect-health-latest-data-is/</guid>
      <description>&lt;p&gt;I recently had to create a new Azure AD Connect server, and found that it was not able to report health status in the Azure Portal. After some troubleshooting/research, I was able to get the health status report working by registering the health agent on the server with Azure AD Health Services. Doing this involves running one PowerShell cmdlet on your AD Connect server and providing global administrator credentials.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h23_56.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h23_56.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, let’s test the status of the agent communication:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h23_19.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h23_19.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you do not receive any errors, that means the Azure AD Connect Health agent on your server is able to successfully communicate with the cloud service. Now, let’s register the agent:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h23_05.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h23_05.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You will be prompted for credentials. The credentials you provide need to be a global administrator account in your Azure AD tenant.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h23_42.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h23_42.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You should receive some output stating that the registration is successful (or it failed).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h25_20.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h25_20.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, just go back to the Azure Portal and refresh the page. The message stating that the
“latest data is not available” should be gone.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h36_42.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-18_12h36_42.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Removing a Forest from Azure AD Connect</title>
      <link>https://rnemeth90.github.io/posts/2018-07-13-removing-forest-from-azure-ad-connect/</link>
      <pubDate>Fri, 13 Jul 2018 15:30:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2018-07-13-removing-forest-from-azure-ad-connect/</guid>
      <description>&lt;p&gt;In an organization with multiple Active Directory forests, you may want to sync objects from trusted forests. Adding trusted forests to Azure AD Sync is a simple process that I will likely cover in a future article. The focus of this post is the not-so-obvious process of removing a forest from Azure AD Connect. This can be a daunting and somewhat scary thing to do. Not fully understanding the process or having someone to guide you can leave you with thoughts like “what happens when I remove the forest from Azure AD Sync? Do on-premises objects get deleted? Are cloud objects deleted?”. I will try to answer these questions to the best of my ability and hopefully make the process simple and stress-free for you.&lt;/p&gt;
&lt;p&gt;To get started, we first need to open PowerShell and disable the AD Sync scheduler. You can do this by running the “Set-ADSyncScheduler” cmdlet:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_10h47_05.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_10h47_05.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This cmdlet is included in the ADSync PowerShell module. You may need to load the module prior to using the cmdlet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Import-Module ADSync
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next step is to open FIM (miisclient) located in the install directory of Microsoft Azure AD Sync. By default, this is C:Program FilesMicrosoft Azure AD SyncUIShellmiisclient.exe. Once you have FIM open, click on the Connectors tab, then right click on the connector for the forest that you want to delete, and click “Delete”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_10h50_26.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_10h50_26.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You will then be prompted, asking if you want to just delete the Connector Space, or delete the Connector and the Connector Space. The former open removes all data, but keeps the configuration in case you want to use it again later. The latter option deleted the data and the configuration. This open should only be used if you don’t plan on syncing the forest again.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_10h50_09.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_10h50_09.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The connector for the forest is now deleted, but what actually happens? Your on-premises objects do not get removed for the forest, and cloud objects &lt;strong&gt;are&lt;/strong&gt; removed. Simple enough, right?&lt;/p&gt;
&lt;p&gt;Now you just need to re-enable the AD Sync Scheduler with this cmdlet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Set-ADSyncScheduler -SyncCycleEnabled $true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One last thing to mention… You may receive an email from the Microsoft Online Services Team stating that the identity synchronization failed due to a deletion threshold being met. By default, Azure AD Connect will not allow you to delete more than 500 objects in your cloud directory. This is to protect you from making a careless (potentially resume generating) mistake. The email will look something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_10h56_04.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_10h56_04.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are certain that you want to proceed with deleting the objects, here are the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Disable the deletion threshold protection. Open PowerShell on your Azure AD Sync server and type in this cmdlet: Disable-ADSyncExportDeletionThreshold. You will be prompted for credentials, sign-in with an Azure AD Global Admin account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open FIM (miisclient), and click on the “Connectors” button at the top of the window. Right click on the connector of type “Windows Azure Active Directory”, and select “Run…”.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_11h07_39.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_11h07_39.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Next, click Export and then click Ok.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_11h07_58.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2018/07/2018-07-13_11h07_58.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;Allow the connector to run. This will take a few minutes. You can monitor the progress by clicking the Operations button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once this completes, you need to re-enable the deletion threshold. You can do this by running this cmdlet: &lt;span style=&#34;background: #F9F9F9;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enable-ADSyncExportDeletionThreshold -DeletionThreshold &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will be prompted for credentials again. Just type in your Azure AD Global Admin creds. You can even lower the threshold if you’d like. I set mine to 100.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Access is Denied When Attempting to Delete a Dynamic Distribution Group</title>
      <link>https://rnemeth90.github.io/posts/2017-06-12-access-is-denied-when-attempting-to-delete-a-dynamic-distribution-group/</link>
      <pubDate>Mon, 12 Jun 2017 13:41:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2017-06-12-access-is-denied-when-attempting-to-delete-a-dynamic-distribution-group/</guid>
      <description>&lt;p&gt;You may receive the error below when attempting to delete a dynamic distribution group.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2017/06/2017-06-12_09h29_20.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2017/06/2017-06-12_09h29_20.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To resolve this, open ADUC and show advanced features (Click View &amp;gt; Advanced Features). Then find the object for the dynamic distribution group and open the properties window. Browse to the “Object” tab and uncheck the “Protect object from accidental deletion” box. Wait for ADDS to replicate or force replication yourself.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2017/06/2017-06-12_09h34_20.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2017/06/2017-06-12_09h34_20.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go back to the ECP and you should be able to delete the group.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The User Profile Service service failed the logon</title>
      <link>https://rnemeth90.github.io/posts/2015-12-30-the-user-profile-service-service-failed-the-logon/</link>
      <pubDate>Wed, 30 Dec 2015 10:38:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2015-12-30-the-user-profile-service-service-failed-the-logon/</guid>
      <description>&lt;p&gt;One of my clients had a really strange issue the other day. He has a domain admin account in his domain and was not able to login to a server that I recently built. The server was an Exchange 2013 box, and was used in Coexistence mode to migrate his company from an Exchange 2007 box.&lt;/p&gt;
&lt;p&gt;He was getting this error message when attempting to login:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/12/2015-12-30_09h38_53.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/12/2015-12-30_09h38_53.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a classic error message that I’m sure most technicians have seen before. Usually the resolution is to go into the registry and rename the user profile key to have a “.bak” extension and then do some other magic. However, this time, that was not the case. I looked in the registry and didn’t even see a reg key for his profile. I then looked in the c:users folder and didn’t see a folder for his profile. Strange…&lt;/p&gt;
&lt;p&gt;So what exactly was happening? Well, I took a look at the Event Viewer and found this error message:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/12/2015-12-30_09h34_06.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/12/2015-12-30_09h34_06.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I browsed to the file referenced in the error message and deleted it. Walla! He was able to login with his admin account. I’m not sure why this file was in the default user profile. It has something to do with Customer Experience Improvement Program:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.nextofwindows.com/what-is-sqmdata-and-sqm-file-in-windows-7-and-how-to-delete-them&#34;&gt;http://www.nextofwindows.com/what-is-sqmdata-and-sqm-file-in-windows-7-and-how-to-delete-them&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Script for Querying All AD Computers Time Source</title>
      <link>https://rnemeth90.github.io/posts/2015-09-01-script-for-querying-all-ad-computers-time-source/</link>
      <pubDate>Tue, 01 Sep 2015 21:05:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2015-09-01-script-for-querying-all-ad-computers-time-source/</guid>
      <description>&lt;p&gt;This script will iterate through all computers in Active Directory and return the configured time server for each computer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;#
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    .&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SYNOPSIS&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     Get time source for all computers in domain
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    .&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EXAMPLE&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     Get-TimeSource
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    .&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;NOTES&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     Author: Ryan Nemeth - RyanNemeth@live.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     Site: http://www.geekyryan.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    .&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LINK&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     http://www.geekyryan.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    .&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     This function will iterate through all computers/servers in a domain and return the time source
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     for each.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Write-Host -foregroundcolor Red -BackgroundColor black &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This script must be run on a domain controller and requires that the AD Powershell module be installed&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$module = Get-Module -ListAvailable | Select-Object -ExpandProperty Name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($module &lt;span style=&#34;color:#f92672&#34;&gt;-notcontains&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveDirectory&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Write-Host -foregroundcolor red -backgroundcolor black &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;***Active Directory Powershell Module Not Found***&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Write-Host -foregroundcolor yellow &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Found Active Directory Powershell Module. Importing...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Import-Module ActiveDirectory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$computers = get-adcomputer -filter * | Select-Object -ExpandProperty Name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;($computer &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; $computers) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $tm_source = w32tm /query /computer&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;$computer /source
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  write-host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The time source for&amp;#34;&lt;/span&gt; $computer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt; $tm_source
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/rnemeth90/PowerShell/blob/master/NTP/Get-TimeSource.ps1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powershell: SID to Username</title>
      <link>https://rnemeth90.github.io/posts/2014-12-08-powershell-sid-to-username-powershell-sid-to-username/</link>
      <pubDate>Mon, 08 Dec 2014 13:43:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2014-12-08-powershell-sid-to-username-powershell-sid-to-username/</guid>
      <description>&lt;p&gt;This is a simple script to convert a SID to a username&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Returns a username based on a SID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Author: Ryan Nemeth&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Date: 12/2/2014&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$SID = read-host &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;Please enter the SID&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$object = New-Object System.Security.Principal.SecurityIdentifier($SID)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$User = $object.Translate( \[System.Security.Principal.NTAccount\])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write-host &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;The user is&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt; $User.Value
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Unlock a Domain User from CMD Line</title>
      <link>https://rnemeth90.github.io/posts/2014-12-08-unlock-domain-user-from-cmd-line/</link>
      <pubDate>Mon, 08 Dec 2014 02:11:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2014-12-08-unlock-domain-user-from-cmd-line/</guid>
      <description>&lt;p&gt;To unlock a domain user from the command line, use this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net user &amp;amp;lt;username&amp;amp;gt; /domain /active:yes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This can also be done using Powershell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unlock-ADAccount -identity &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;CN=John,OU=myUsers,DC=myDomain,DC=local&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>The Case of Transitive Trusts and Dropped RPC Connections</title>
      <link>https://rnemeth90.github.io/posts/2014-11-25-the-case-of-transitive-trusts-and-dropped-rpc-connections/</link>
      <pubDate>Tue, 25 Nov 2014 01:27:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2014-11-25-the-case-of-transitive-trusts-and-dropped-rpc-connections/</guid>
      <description>&lt;p&gt;I was at a client earlier this morning, working to get a transitive forest trust setup between their two domains. Setting up the trust on ServerA to DomainB went without issue. However, when trying to create the trust between ServerB and DomainA, I received this error: The secure channel reset on Active Directory Domain Controller (Your domain controller) of domain (Your domain) to domain (your other domain) failed with error: RPC server is unavailable.&lt;/p&gt;
&lt;p&gt;Troubleshooting (as always) started off with the basics: is the firewall on or off, are the services running, are the names being properly resolved, etc. Well, the Windows Firewall on both servers was off and
the RPC services were running. So what now?? I fired up NMAP on ServerB and did a syn scan on ServerA. After reviewing the output, I could see that the ports were open. I then went over to ServerA and opened up the Services MSC console. The RPC services appeared to be running. Being that they are system services and you cannot manually interact with them, I was unable to manually restart them. Just out of curiosity,&lt;/p&gt;
&lt;p&gt;I opened a command prompt while connected to that server and ran Netstat -A. This is when I had the “AHA!” moment. Nothing was listening on any of the RPC ports! I rebooted the server (something I don’t really like to do..), logged in and ran Netstat -A again. This time, RPC was listening. I went back over to ServerB, walked through the New Trust Wizard, and success! Oh, the feeling of victory!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
