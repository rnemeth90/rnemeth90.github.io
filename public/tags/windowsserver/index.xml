<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WindowsServer on GeekyRyan</title>
    <link>https://rnemeth90.github.io/tags/windowsserver/</link>
    <description>GeekyRyan (WindowsServer)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 31 Oct 2020 01:02:00 +0000</lastBuildDate>
    
    <atom:link href="https://rnemeth90.github.io/tags/windowsserver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy a New ADDS Forest on Server 2019 Core</title>
      <link>https://rnemeth90.github.io/posts/2020-10-31-deploy-new-adds-forest-on-server-2019/</link>
      <pubDate>Sat, 31 Oct 2020 01:02:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2020-10-31-deploy-new-adds-forest-on-server-2019/</guid>
      <description>&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;p&gt;Change server name and IP address
Configure time settings and NTP&lt;/p&gt;
&lt;p&gt;In this post we will be reviewing the basic installation of the Active Directory Domain Services role and setup of a new forest on Windows Server Core 2019.&lt;/p&gt;
&lt;p&gt;To get started, login to your server with administrator privileges. You will first need to type in “powershell” in the cmd prompt to start powershell. Once you do that, type in the following command to install the Active Directory Domain Services role:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-LnSTbXjG2Hc/X5y3R3F-eWI/AAAAAAAAx2A/lWQBpA44Dmo-Jpbck2iPmgibU6z0DM1YwCLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-12.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After installing the role, we’ll continue by creating a new ADDS Forest and promoting this server to the primary domain controller.&lt;/p&gt;
&lt;p&gt;First, we’ll need to gather a password. This password will not be used for a domain user account. The local administrator on this server will become the domain administrator account for the domain. The password we’re gathering in the next step will be used for Directory Services Restore Mode (DSRM). DSRM is a recovery mode used to recover domain controllers that won’t boot up. We technically only need a password, not a username for this account.&lt;/p&gt;
&lt;p&gt;Type in the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$cred = Get-Credential
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the username field for the credentials prompt below, just type in anything you want, as the value will not be used. This prompt will store our username/password in a variable object. We can then access the password within the credential object by typing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$cred.password
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that this password is stored as a secure string object. Let’s continue on with the Directory Services installation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-n-W0yvwr2Zs/X5y3X64NjZI/AAAAAAAAx2E/rx5urA7p_NMl3peX5g0J7Ax7biWwNADAgCLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-13.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-0k-aZrMhyGw/X5y3ckH10pI/AAAAAAAAx2I/FS56uvXCirAaBHKwWmIRQ4xIGU_jp_GFwCLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-14.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once we have our credential variable, we can install a new forest and domain controller using the command below. Let us break down what this cmd is doing:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-OF_HVfCPZIM/X5y3ijEA5YI/AAAAAAAAx2M/0vMV3CJczT8D3q5x8hzPAZVSL5DycplBACLcBGAsYHQ/image.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-15.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install-ADDSForest: The powershell cmdlet to create a new forest and domain controller&lt;/p&gt;
&lt;p&gt;-DomainName: The domain name to be used for the forest&lt;/p&gt;
&lt;p&gt;-DomainNetBiosName: The domain “Short name” to be used for the forest. This is the value used when you type in a username in the domainusername format. Example “myDomainbgates”.&lt;/p&gt;
&lt;p&gt;-SafeModeAdministratorPassword: The value we captured in our credential prompt above. This is used for Directory Services Restore Mode. This mode can be accessed by pressing F8 while the server is booting. It is commonly used for recovering a failed domain controller.&lt;/p&gt;
&lt;p&gt;-DatabasePath: The path for the Active Directory database. It’s a best practice to put this database on its own disk.&lt;/p&gt;
&lt;p&gt;-LogPath: The directory for ADDS log files&lt;/p&gt;
&lt;p&gt;-DomainMode: The domain functional level. The domain functional level specifies the attributes and capabilities available to objects within the domain. The higher the level you choose, the more features will be available to you.&lt;/p&gt;
&lt;p&gt;-ForestMode: The forest functional level. Similar to the domain functional level but applies to the entire forest.&lt;/p&gt;
&lt;p&gt;-InstallDNS: Install the DNS role alongside the ADDS role.&lt;/p&gt;
&lt;p&gt;-WhatIf: This is a powershell “thing”. Most cmdlets have the “whatif” parameter. It basically allows you to run the cmdlet in “test” mode without actually making any changes to your environment. Once you’re happy with the output, you can remove the “whatif” parameter and run the command to install ADDS and promote this server to a domain controller.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WSUS: Update Files Not Downloading (Content File Download Failed)</title>
      <link>https://rnemeth90.github.io/posts/2016-11-18-wsus-update-files-not-downloading/</link>
      <pubDate>Fri, 18 Nov 2016 15:13:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2016-11-18-wsus-update-files-not-downloading/</guid>
      <description>&lt;p&gt;This article will discuss an issue regarding WSUS failing to download updates from Microsoft Update servers. You may notice that the home page of your WSUS console states that it has downloaded 0MB of updates:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-18_10h02_21.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-18_10h02_21.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may also see this event (or similar) in the Event Log.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-15_16h39_32.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-15_16h39_32.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This problem is caused by not specifying a valid path when assigning the WSUS content drive when first installing the role. The first time you load the WSUS console after installing the role, you will be prompted to specify the path to store Windows Update files. WSUS does not like to have its content directory be the root of a partition. For example, if I were to specify “e:” as the path for the Windows Update content, the wizard would give you an error message stating that the path is not valid. However, it doesn’t prompt you to re-enter the path if you click close. The WSUS console opens immediately after and that invalid path is where WSUS will try to store your update files. This is and has been a known bug for a while and needs to be addressed by Microsoft. Evidence of the invalid path can be found in the registry under:&lt;/p&gt;
&lt;p&gt;HKLMSoftwareMicrosoftUpdate ServicesServerSetupContentDir&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-15_16h39_44.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-15_16h39_44.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you come across this problem, you can change the ContentDir above to a valid path. Keep in mind that it cannot be the root of a partition. You need to specify a drive letter with a subfolder (eg: e:wsus).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-12-21_14h54_54.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-12-21_14h54_54.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The other option is to reinstall the WSUS role. If you remove the role, the WID database is not removed, unless you remove that role as well (or manually delete the database). This means that when you reinstall the WSUS role, it will be able to use that same database and any clients that have contacted the WSUS server will immediately show up in the console. The same is true for update metadata. The new WSUS installation will still have the same approvals, denials, etc. as the old installation.&lt;/p&gt;
&lt;p&gt;Regardless of what option you choose, I suggest rebooting the server after you make the changes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WSUS: An error occurred trying to connect the WSUS server</title>
      <link>https://rnemeth90.github.io/posts/2016-11-10-wsus-an-error-occurred-trying-to-connect-the-wsus-server/</link>
      <pubDate>Thu, 10 Nov 2016 15:18:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2016-11-10-wsus-an-error-occurred-trying-to-connect-the-wsus-server/</guid>
      <description>&lt;p&gt;Ran into this error message when configuring a new WSUS server:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-12-21_14h56_00.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-12-21_14h56_00.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Restarted the WSUS, WID, and IIS services to no avail. I even rebooted the server. The WSUS console would work for a short period of time, and then would randomly stop working.&lt;/p&gt;
&lt;p&gt;I found that the WSUS app pool in IIS was being disabled anytime new clients connected to the server. I believe this was because the app pool was running out of usable memory.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h28_56.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h28_56.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can manually start the app pool in IIS, but it will continue to crash.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-12-21_14h56_48.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-12-21_14h56_48.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The solution for me was to increase the memory limit available for the application pool:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-12-21_14h57_38.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-12-21_14h57_38.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By default it is only configured to use just under 2 GBs. I reconfigured it to use up to 4 GB and the WSUS console has not crashed since. After re-configuring the memory for the application pool, run an IIS reset or reboot the server.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h31_40.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h31_40.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UPDATE: Setting the Private Memory Limit to “0” will allow the application pool to use whatever amount of memory it needs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WDS Service: The Service did not respond in a timely fashion</title>
      <link>https://rnemeth90.github.io/posts/2016-11-10-wds-service-the-service-did-not-respond-in-a-timely-fashion/</link>
      <pubDate>Thu, 10 Nov 2016 02:19:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2016-11-10-wds-service-the-service-did-not-respond-in-a-timely-fashion/</guid>
      <description>&lt;p&gt;This was a new one for me. Usually WDS is rock solid and it just works.&lt;/p&gt;
&lt;p&gt;Anyway, I was getting ready to deploy some servers in my lab and found that I couldn’t get WDS to start on my deployment server. I got this error message when trying to start the service:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h02_29.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h02_29.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I then tried to start the service from the Services console and got this error message:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h02_42.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h02_42.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“This was just working yesterday”, I said to myself. What could possibly have happened since yesterday evening that could cause this? I looked in the event log and after scrolling through the Administrative Events, I found this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h04_33.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h04_33.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The solution was so obvious it was staring me in the face, but I wanted to verify first. So I fired up a cmd prompt and ran netstat, and found this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h06_14.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h06_14.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had installed DHCP on this server the night before and totally forgot about it. Anyway, the solution was simple. I just needed to tell the WDS service to not listen on port 67. To do that, just open the WDS server properties and got to the “DHCP” tab. Then check the box next to “Do not listen on DHCP Ports”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h08_04.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2016/11/2016-11-09_21h08_04.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was then able to start the DHCP service.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Script to Move All Disabled AD Objects to a Specified OU</title>
      <link>https://rnemeth90.github.io/posts/2016-10-06-script-to-move-all-disabled-ad-objects-to-a-specified-ou/</link>
      <pubDate>Thu, 06 Oct 2016 03:03:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2016-10-06-script-to-move-all-disabled-ad-objects-to-a-specified-ou/</guid>
      <description>&lt;p&gt;The title says it all. This script will move all disabled AD objects to a specified OU. This script accepts parameters that will allow you to specify whether you want to move Users or Computers and the destination OU. It also accepts a “test mode” parameter that will run the script and output the results, without actually modifying Active Directory.&lt;/p&gt;
&lt;p&gt;This is revision 1 of the script. There are still several improvements I would like to make, including better error handling and recovery.&lt;/p&gt;
&lt;p&gt;If you have any suggestions or requests, please leave a comment.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/open?id=0B2K6VOnt6zeXMVFleWZISHZBTnc&#34;&gt;Download Here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The User Profile Service service failed the logon</title>
      <link>https://rnemeth90.github.io/posts/2015-12-30-the-user-profile-service-service-failed-the-logon/</link>
      <pubDate>Wed, 30 Dec 2015 10:38:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2015-12-30-the-user-profile-service-service-failed-the-logon/</guid>
      <description>&lt;p&gt;One of my clients had a really strange issue the other day. He has a domain admin account in his domain and was not able to login to a server that I recently built. The server was an Exchange 2013 box, and was used in Coexistence mode to migrate his company from an Exchange 2007 box.&lt;/p&gt;
&lt;p&gt;He was getting this error message when attempting to login:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/12/2015-12-30_09h38_53.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/12/2015-12-30_09h38_53.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a classic error message that I’m sure most technicians have seen before. Usually the resolution is to go into the registry and rename the user profile key to have a “.bak” extension and then do some other magic. However, this time, that was not the case. I looked in the registry and didn’t even see a reg key for his profile. I then looked in the c:users folder and didn’t see a folder for his profile. Strange…&lt;/p&gt;
&lt;p&gt;So what exactly was happening? Well, I took a look at the Event Viewer and found this error message:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/12/2015-12-30_09h34_06.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/12/2015-12-30_09h34_06.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I browsed to the file referenced in the error message and deleted it. Walla! He was able to login with his admin account. I’m not sure why this file was in the default user profile. It has something to do with Customer Experience Improvement Program:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.nextofwindows.com/what-is-sqmdata-and-sqm-file-in-windows-7-and-how-to-delete-them&#34;&gt;http://www.nextofwindows.com/what-is-sqmdata-and-sqm-file-in-windows-7-and-how-to-delete-them&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding All Mailboxes with a Forwarding Address in Exchange 2003</title>
      <link>https://rnemeth90.github.io/posts/2015-09-07-finding-all-mailboxes-with-a-forwarding-address-in-exchange-2003/</link>
      <pubDate>Mon, 07 Sep 2015 23:13:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2015-09-07-finding-all-mailboxes-with-a-forwarding-address-in-exchange-2003/</guid>
      <description>&lt;p&gt;Believe it or not, the MSP I work for still has a client who is using Exchange 2003 as their primary email service. Despite several attempts at convincing them of the power of Office 365, they refuse to migrate. Last week the CFO contacted me and requested we provide them with a report of all users who have their email forwarded to another mailbox. “Ok, no problem.” I said helpfully as the client informed me of their request (at the time I didn’t even think about them having Exchange 2003…). I figured I would just connect to their server and do some quick PowerShell magic, and that would be it. Quick and painless, right? Wrong.&lt;/p&gt;
&lt;p&gt;I did the RDP dance and got connected to their server, and my jaw just about hit the floor when I couldn’t find the Exchange Management Shell! I asked around the office to see if any of the other guys could help, but no one knew what to do. However, after talking with one of the guys, I remembered that this is Active Directory we are dealing with. There are objects, and those objects have attributes. The mailboxes/user accounts are objects, and those objects have attributes. So what attribute is it that controls forwarding addresses? I manually found one of the users who had a forwarding address configured. Then I opened up Active Directory Users and Computers, opened up her account properties, and went to the Attribute Editor tab. I filtered for attributes that have values and was able to see the email address that her mail was forwarding to. This was the “altRecipient” attribute.&lt;/p&gt;
&lt;p&gt;I then did an “Advanced” search in Active Directory Users and Computers for any objects that have the “altRecipient” attribute configured, like so:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/09/ExchangeForwarding.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/09/ExchangeForwarding.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This search showed me all of the mailboxes that have an alternate recipient (forwarding address) configured. Not sure if there is another way to obtain this information, but this is the way that worked for me. Hopefully this article is able to help someone in the same situation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Script for Querying All AD Computers Time Source</title>
      <link>https://rnemeth90.github.io/posts/2015-09-01-script-for-querying-all-ad-computers-time-source/</link>
      <pubDate>Tue, 01 Sep 2015 21:05:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2015-09-01-script-for-querying-all-ad-computers-time-source/</guid>
      <description>&lt;p&gt;This script will iterate through all computers in Active Directory and return the configured time server for each computer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;#
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    .&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SYNOPSIS&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     Get time source for all computers in domain
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    .&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EXAMPLE&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     Get-TimeSource
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    .&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;NOTES&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     Author: Ryan Nemeth - RyanNemeth@live.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     Site: http://www.geekyryan.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    .&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LINK&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     http://www.geekyryan.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    .&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     This function will iterate through all computers/servers in a domain and return the time source
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     for each.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Write-Host -foregroundcolor Red -BackgroundColor black &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This script must be run on a domain controller and requires that the AD Powershell module be installed&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$module = Get-Module -ListAvailable | Select-Object -ExpandProperty Name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($module &lt;span style=&#34;color:#f92672&#34;&gt;-notcontains&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveDirectory&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Write-Host -foregroundcolor red -backgroundcolor black &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;***Active Directory Powershell Module Not Found***&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Write-Host -foregroundcolor yellow &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Found Active Directory Powershell Module. Importing...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Import-Module ActiveDirectory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$computers = get-adcomputer -filter * | Select-Object -ExpandProperty Name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;($computer &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; $computers) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $tm_source = w32tm /query /computer&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;$computer /source
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  write-host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The time source for&amp;#34;&lt;/span&gt; $computer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt; $tm_source
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/rnemeth90/PowerShell/blob/master/NTP/Get-TimeSource.ps1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Error When Reinstalling DirSync</title>
      <link>https://rnemeth90.github.io/posts/2015-08-13-error-when-reinstalling-dirsync/</link>
      <pubDate>Thu, 13 Aug 2015 18:59:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2015-08-13-error-when-reinstalling-dirsync/</guid>
      <description>&lt;p&gt;Today is just not my day! After a failed attempt at installing/configuring DirSync, I removed it and tried to install and configure it again. This time did not prove any more successful. I was getting this error midway through the install process:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://geekyryan.com/wp-content/uploads/2015/08/1.png&#34;&gt;&lt;img src=&#34;https://geekyryan.com/wp-content/uploads/2015/08/1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was able to figure this out after a little while and wanted to sure what I learned. If you are seeing this error message after removing DirSync and trying to reinstall, here’s what you need to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uninstall Windows Azure Active Directory Sync tool and reboot
&lt;a href=&#34;https://geekyryan.com/wp-content/uploads/2015/08/2.png&#34;&gt;&lt;img src=&#34;https://geekyryan.com/wp-content/uploads/2015/08/2.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remove this directory and all subfolders: C:Program FilesWindows Azure Active Directory Sync
&lt;a href=&#34;https://geekyryan.com/wp-content/uploads/2015/08/3.png&#34;&gt;&lt;img src=&#34;https://geekyryan.com/wp-content/uploads/2015/08/3.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you created a domain account to use for DirSync, remove it. Also remove the Office 365 account you created.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete the Group accounts that the DirSync wizard created. Their names all begin with “FIM”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://geekyryan.com/wp-content/uploads/2015/08/4.png&#34;&gt;&lt;img src=&#34;https://geekyryan.com/wp-content/uploads/2015/08/4.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uninstall MSSQL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete the MSSQL directory: C:Program FilesMicrosoft SQL Server&lt;/li&gt;
&lt;li&gt;Reboot!&lt;/li&gt;
&lt;li&gt;You should be able to install and configure DirSync now.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://geekyryan.com/wp-content/uploads/2015/08/5.png&#34;&gt;&lt;img src=&#34;https://geekyryan.com/wp-content/uploads/2015/08/5.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Failed to Mount Exchange 2010 Database</title>
      <link>https://rnemeth90.github.io/posts/2015-08-12-failed-to-mount-exchange-2010-database/</link>
      <pubDate>Wed, 12 Aug 2015 12:59:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2015-08-12-failed-to-mount-exchange-2010-database/</guid>
      <description>&lt;p&gt;Recently, one of my users’ came to me and said he was missing two months worth of email. This was just after migrating to Exchange Online. We were using Exchange 2010 with System Center DPM for backups.&lt;/p&gt;
&lt;p&gt;I restored the database that the users’ mailbox was on from a backup then copied it over to the Exchange server from the network share I restored it to. All was going well, until I tried to mount the darn thing.&lt;/p&gt;
&lt;p&gt;I was getting this error and could not for the life of me decry-pt the meaning of it. There is obviously some type of IO issue/file not found. But what could it be?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/1-1.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/1-1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I figured I’d better kick this one off with some basic troubleshooting. First, I checked the health of the database and made sure it was clean. Passed that test…&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/2-1.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/2-1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then ran a repair on the database, to no avail.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/3-1.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/3-1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After racking my brain for a good thirty minutes, and a few failed Google searches, I found the solution. It was so simple! I created the log file directory in the folder with the database, and voila, the database mounted without a single error!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/7.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/7.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/4-1.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/4-1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/5-1.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/5-1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was able to see the ‘supposed’ location of the log file by opening the Exchange Management Shell and running the ‘Get-MailboxDatabase’ cmdlet, like so:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Get-MailBoxDatabase –Identity &lt;Recovery DB Name&gt; | FL Name, ServerName, EDBFilePath, LogFolderPath&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/6.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/08/6.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m not sure why the database mounting process isn’t capable of creating the log file directory… I think Microsoft would have thought and planned for a situation like this. Hope this helps!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powershell: SID to Username</title>
      <link>https://rnemeth90.github.io/posts/2014-12-08-powershell-sid-to-username-powershell-sid-to-username/</link>
      <pubDate>Mon, 08 Dec 2014 13:43:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2014-12-08-powershell-sid-to-username-powershell-sid-to-username/</guid>
      <description>&lt;p&gt;This is a simple script to convert a SID to a username&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Returns a username based on a SID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Author: Ryan Nemeth&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Date: 12/2/2014&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$SID = read-host &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;Please enter the SID&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$object = New-Object System.Security.Principal.SecurityIdentifier($SID)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$User = $object.Translate( \[System.Security.Principal.NTAccount\])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write-host &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;The user is&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt; $User.Value
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Unlock a Domain User from CMD Line</title>
      <link>https://rnemeth90.github.io/posts/2014-12-08-unlock-domain-user-from-cmd-line/</link>
      <pubDate>Mon, 08 Dec 2014 02:11:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2014-12-08-unlock-domain-user-from-cmd-line/</guid>
      <description>&lt;p&gt;To unlock a domain user from the command line, use this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;net user &amp;amp;lt;username&amp;amp;gt; /domain /active:yes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This can also be done using Powershell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unlock-ADAccount -identity &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;CN=John,OU=myUsers,DC=myDomain,DC=local&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>The Case of Transitive Trusts and Dropped RPC Connections</title>
      <link>https://rnemeth90.github.io/posts/2014-11-25-the-case-of-transitive-trusts-and-dropped-rpc-connections/</link>
      <pubDate>Tue, 25 Nov 2014 01:27:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2014-11-25-the-case-of-transitive-trusts-and-dropped-rpc-connections/</guid>
      <description>&lt;p&gt;I was at a client earlier this morning, working to get a transitive forest trust setup between their two domains. Setting up the trust on ServerA to DomainB went without issue. However, when trying to create the trust between ServerB and DomainA, I received this error: The secure channel reset on Active Directory Domain Controller (Your domain controller) of domain (Your domain) to domain (your other domain) failed with error: RPC server is unavailable.&lt;/p&gt;
&lt;p&gt;Troubleshooting (as always) started off with the basics: is the firewall on or off, are the services running, are the names being properly resolved, etc. Well, the Windows Firewall on both servers was off and
the RPC services were running. So what now?? I fired up NMAP on ServerB and did a syn scan on ServerA. After reviewing the output, I could see that the ports were open. I then went over to ServerA and opened up the Services MSC console. The RPC services appeared to be running. Being that they are system services and you cannot manually interact with them, I was unable to manually restart them. Just out of curiosity,&lt;/p&gt;
&lt;p&gt;I opened a command prompt while connected to that server and ran Netstat -A. This is when I had the “AHA!” moment. Nothing was listening on any of the RPC ports! I rebooted the server (something I don’t really like to do..), logged in and ran Netstat -A again. This time, RPC was listening. I went back over to ServerB, walked through the New Trust Wizard, and success! Oh, the feeling of victory!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating Applocker Policies</title>
      <link>https://rnemeth90.github.io/posts/2014-11-17-creating-applocker-policies/</link>
      <pubDate>Mon, 17 Nov 2014 01:40:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2014-11-17-creating-applocker-policies/</guid>
      <description>&lt;p&gt;Application Control Policies can be used to restrict what programs a user is allowed to run. They can be created at the local Group Policy level or the Domain GPO level. There are 4 different types of Applocker RULES that you can implement, depending on what type of executable you want to control access to.&lt;/p&gt;
&lt;p&gt;Executable Rules – EXE’s, COM’s, etc.&lt;/p&gt;
&lt;p&gt;Script Rules – batch files, VB scripts, etc.&lt;/p&gt;
&lt;p&gt;AppX Rules – AppX Packages (Windows 8.1/Server 2012 R2 Metro Interface programs)&lt;/p&gt;
&lt;p&gt;Windows Installer Rules – Windows Installer Packages and MSU Packages&lt;/p&gt;
&lt;p&gt;After choosing what type of executable file you want to control, you can choose the corresponding rule type. Then, you will be able to choose the criteria for that rule type. Applocker rule criteria are things such as file path, publisher, and file hash. Criteria allow you to be more granular with your selections. Rather than saying you want to block access to ALL executable’s on a computer, you can choose to block access to executable’s published by a certain vendor, or found in a specified directory.&lt;/p&gt;
&lt;p&gt;Applocker can be found in the Group Policy Editor at: Computer Configuration\Windows Settings\Security Settings. Application Control Policies. By right-clicking on the Applocker node, you can configure rule enforcement. You have the option to enforce rules or audit rules based on rule type. Auditing will allow&lt;/p&gt;
&lt;p&gt;you get a good grasp on what Applocker will do in your environment if you are unsure.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2014/11/2014-11-16_20h18_31.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2014/11/2014-11-16_20h18_31.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Clicking the Advanced tab of this window will allow you to configure rule enforcement for Dynamic Link Libraries. It’s best to leave DLL rule enforcement disabled, because it can cause a system to suffer dramatic performance hits.&lt;/p&gt;
&lt;p&gt;Underneath the Applocker node, you will find nodes for the 4 different rule types. You can create new rules by right clicking on any of these nodes and clicking “Create New Rule”. Before creating any rules, I advise you to create the default rules. Doing this will ensure that users are still able to run programs in the Program Files directory and the Windows directory. Also, members of the built-in Administrators group will be allowed to run ANY files.&lt;/p&gt;
&lt;p&gt;When creating custom Applocker rules, you can choose to allow or deny the program, and what group the rule will apply to (by default, the “Everyone” special identity is always selected).&lt;/p&gt;
&lt;p&gt;You will also be able to choose the criteria for the executable that you are controlling.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2014/11/2014-11-16_20h26_30.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2014/11/2014-11-16_20h26_30.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the executable has a digital signature from the software publisher, choose “Publisher”. Doing so will give you even more options:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2014/11/2014-11-16_20h28_47.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2014/11/2014-11-16_20h28_47.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This allows you to really drill down and get granular with the rule. Microsoft allows us to control access to the file based on the Publisher, the Product Name, the File Name, and even the File Version.&lt;/p&gt;
&lt;p&gt;Creating rules based on File Path criteria is not advised, being that if the file jumps directories, the rule will no longer apply. I also don’t advise using the File Hash criteria. My reason behind this is, if the file gets updated, the hash changes. If that happens, the rule is no longer valid.&lt;/p&gt;
&lt;p&gt;After choosing the criteria type you would like to use, you can choose to create exceptions, if any. When multiple rules conflict, the order of precedence is Publisher, File Hash, and then File Path. So Publisher rules will always override File Hash rules, File Hash rules will always override File Path rules, and you get the point…&lt;/p&gt;
&lt;p&gt;Finally, in order for your endpoint workstations to process Applocker rules, the Application Identity Service must be running. I like to control this with the same GPO that I configure Applocker in.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BranchCache</title>
      <link>https://rnemeth90.github.io/posts/2014-11-16-branchcache/</link>
      <pubDate>Sun, 16 Nov 2014 21:16:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2014-11-16-branchcache/</guid>
      <description>&lt;p&gt;Branchcache is a technology unique to Windows 7 and Windows Server 2008 R2. It provides faster connection to shared files across wide area networks. Branchcache works by caching content hosted on remote servers on a local caching server in the LAN. When a client queries for data on a remote server, it first looks in the local caching server. If the data is not found there, the remote server is accessed and transfer’s the data to the local caching server, where it is then accessed by the client who originally made the request. That way, all future client requests will not have to go across the wide area network, rather opting to access the local caching server until the data changes.&lt;/p&gt;
&lt;p&gt;Branchcache is only available on Windows 7 clients running Enterprise or Ultimate, and Windows Server 2008 R2. Branchcache becomes active when the round trip latency time from client to remote server exceeds 80 milliseconds.&lt;/p&gt;
&lt;p&gt;Branchcache is available in two modes: distributed cache mode and hosted cache mode. What you just read above was the basics of hosted cached mode. Distributed cache mode works differently to achieve the same results. When a client accesses data across the WAN, it stores that data in its own cache. This way, if another client needs access to the data, it can retrieve it locally. Also, this allows each client to host part of the cache, rather than one machine hosting the entire cache.&lt;/p&gt;
&lt;p&gt;There are two steps to configuring Branchcache on a Windows 7 client. I will not include the server configuration at this point in time.&lt;/p&gt;
&lt;p&gt;Enable Branchcache (Hosted or Distributed, Server 08 R2 will be required for Hosted mode)&lt;/p&gt;
&lt;p&gt;Configure the appropriate ports within the Windows Firewall&lt;/p&gt;
&lt;p&gt;You can enable Branchcache from within Group Policy or by using the Netsh command. When using Group Policy, navigate to Computer Configuration &amp;gt; Administrative Templates &amp;gt; Network &amp;gt; Branchcache. From here you can turn on Branchcache and enable the mode you want to use. You can also set the percentage of disk space to be used for caching. After this, open the Windows Firewall and unblock the Branchcache ports. You only need to do this when configuring Branchcache via Group Policy. Using the Netsh command automatically configures the firewall. Here are the basic commands for Netsh:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Netsh Branchcache set service mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;distributed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Netsh Branchcache reset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Netsh Branchcache show status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Netsh Branchcache set cachesize
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;*Configuring Branchcache must be done from an administrative command prompt.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
