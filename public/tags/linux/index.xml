<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on GeekyRyan</title>
    <link>http://localhost:1313/tags/linux/</link>
    <description>GeekyRyan (Linux)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Dec 2023 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="http://localhost:1313/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx Ingress Response Header Size - A Cautionary Tale</title>
      <link>http://localhost:1313/posts/2023-12-04-nginx-ingress-resp-header-size/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2023-12-04-nginx-ingress-resp-header-size/</guid>
      <description>&lt;p&gt;This will be a short post about a recent issue I encountered when using Nginx as a Kubernetes ingress. Though, this could also be encountered when using Nginx as a reverse proxy as well. The two definitions are functionally similar.&lt;/p&gt;
&lt;p&gt;We recently had a client call in complaining of our application returning random 502s (Bad Gateway).&lt;/p&gt;
&lt;p&gt;After some investigation and the common finger-pointing, I found this entry in the logs of our ingress controllers:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;note&lt;/em&gt; this log entry is truncated&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[error] 193#193: 
    *25 upstream sent too big header while reading response header from upstream
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This error message pointed towards a limitation in Nginx&amp;rsquo;s default configuration - it struggles with large headers. This is a known quirk of Nginx, contrasting with some other web servers that can handle larger headers by default.&lt;/p&gt;
&lt;p&gt;We later found that this client&amp;rsquo;s large HTTP headers were due to a large content security policy header.&lt;/p&gt;
&lt;p&gt;The solution seemed straightforward: increase the buffer size in Nginx to accommodate larger headers. For a typical Nginx setup, this could be achieved by tweaking the configuration file:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;proxy_buffers 8 16k;  # 8 buffers of 16k each
proxy_buffer_size 16k; # 16k for headers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, the situation gets a bit more complex when dealing with Nginx as an ingress controller in a Kubernetes environment.&lt;/p&gt;
&lt;h3 id=&#34;configuring-nginx-ingress-controller&#34; &gt;Configuring Nginx Ingress controller
&lt;span&gt;
    &lt;a href=&#34;#configuring-nginx-ingress-controller&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Fortunately, the Nginx Ingress controller is designed to cater to such customizations. It allows configuration changes through a Kubernetes ConfigMap, which maps to Nginx&amp;rsquo;s internal settings. To adjust the buffer size, you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deploy a ConfigMap with your desired settings, or add entries to an existing ConfigMap. For example, setting proxy-buffer-size to &amp;ldquo;16k&amp;rdquo; to handle larger headers:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: kube-system
data:
  proxy-buffer-size: &amp;#34;16k&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If creating a new ConfigMap, you will need to tell Nginx pods to read it. This involves passing the name of your ConfigMap as an argument in your deployment configuration:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;args:
  - /nginx-ingress-controller
  - --configmap=$(POD_NAMESPACE)/nginx-configuration
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the ConfigMap is in place, the Nginx pods will pickup and apply the new settings&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Netcat</title>
      <link>http://localhost:1313/posts/2023-11-27-netcat/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2023-11-27-netcat/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Netcat is a versatile networking utility that can be used for a wide range of tasks. It has often been referred to as the &amp;ldquo;network swiss-army knife&amp;rdquo;. Netcat was first released in the mid-90s, and I personally find it ironic to be blogging about it in 2023! But I feel like it is a somewhat cryptic tool, and new engineers or college graduates may not be familiar. This article is meant for those people who are not familiar with it, or have only briefly been exposed.&lt;/p&gt;
&lt;p&gt;Netcat is a simple utility that reads and writes data across raw TCP/UDP sockets. Netcat is a command-line tool available out of the box on most *nix operating systems and can also be installed on Windows. It&amp;rsquo;s a powerful tool for debugging and investigating networks. It can even be used for tasks like port scanning, transferring files, chatting with friends on a network, and even creating backdoors (for testing purposes, obviously :) ).&lt;/p&gt;
&lt;h2 id=&#34;understanding-udp&#34; &gt;Understanding UDP
&lt;span&gt;
    &lt;a href=&#34;#understanding-udp&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Before we dive into exploring UDP connections with netcat, let&amp;rsquo;s quickly get a refresher on UDP. UDP is a connectionless transport layer protocol that does not provide the same reliability, flow-control, and error-checking mechanisms as TCP. Unlike TCP, UDP also does not establish a persistent connection between the sender and receiver. Instead, it sends data packets, known as datagrams, individually using a &amp;lsquo;fire and forget&amp;rsquo; method. UDP is often used for applications where real-time communication and low overhead are crucial, such as streaming media, gaming, DNS (though, certain functions of DNS may also use TCP), and IoT devices.&lt;/p&gt;
&lt;h2 id=&#34;understanding-tcp&#34; &gt;Understanding TCP
&lt;span&gt;
    &lt;a href=&#34;#understanding-tcp&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s also crucial to have a fundamental knowledge of the TCP protocol. TCP is one of the main protocols in the Internet protocol suite, laying the foundation for the majority of data exchange over the Internet. Unlike its counterpart, UDP (User Datagram Protocol), TCP is connection-oriented, meaning a connection is established and maintained until the application programs at each end have finished exchanging messages. This ensures reliable, ordered, and error-checked delivery of a stream of data between applications running on hosts communicating over an IP network. Key features of TCP include its ability to manage data packet size, data transfer rate, and network traffic congestion, making it ideal for applications where data integrity and accuracy are crucial, such as web browsing, email, and file transfer. Understanding TCP is essential for effectively utilizing tools like Netcat, as it provides the basis for establishing stable and secure connections across a network.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-simple-clientserver&#34; &gt;Creating a Simple Client/Server
&lt;span&gt;
    &lt;a href=&#34;#creating-a-simple-clientserver&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The following will create a simple UDP server and client.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Launch a shell and type the following command. This will tell netcat to listen (&lt;code&gt;-l&lt;/code&gt;) on UDP (&lt;code&gt;-u&lt;/code&gt;) port (&lt;code&gt;-p&lt;/code&gt;) 5555.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nc -l -u -p 5555
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Launch another shell and type the following. This will connect to the server we created above.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nc -u 127.0.0.1 5555
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;You can now send messages to the server, like so:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Client:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ nc -u 127.0.0.1 5555
hello
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Server:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ nc -l -u -p 5555
hello
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can do the same thing with TCP, just leave out the &lt;code&gt;-u&lt;/code&gt; in each command above.&lt;/p&gt;
&lt;h2 id=&#34;transfer-a-file&#34; &gt;Transfer a File
&lt;span&gt;
    &lt;a href=&#34;#transfer-a-file&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;On the receiving end:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nc -l -p 5555 &amp;gt; outputfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On the sending end:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nc [hostname or IP address of server] 5555 &amp;lt; inputfile
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;port-scanning&#34; &gt;Port Scanning:
&lt;span&gt;
    &lt;a href=&#34;#port-scanning&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;netcat -v -z -n -w 1 v.txvip1 1-1023
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;serve-a-web-page&#34; &gt;Serve a web page:
&lt;span&gt;
    &lt;a href=&#34;#serve-a-web-page&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;If you have an html file, you can create a simple web server for it. Here we tell netcat to listen on port 8080 and redirect the contents of index.html to any &amp;rsquo;thing&amp;rsquo; that connects:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nc -l -p 8080 &amp;lt; index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In the examples above, I always use port 5555. You can technically use just about any port you want. However, attempting to use any port below 1024 will require root privileges. The port you choose cannot be in use by another process.&lt;/p&gt;
&lt;h2 id=&#34;other-practical-examples&#34; &gt;Other Practical Examples
&lt;span&gt;
    &lt;a href=&#34;#other-practical-examples&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s explore a few more practical examples to illustrate the usefulness of netcat&amp;rsquo;s UDP capabilities. I will leave the actual implementation as an exercise for you to try.&lt;/p&gt;
&lt;h3 id=&#34;example-1-testing-a-tcpudp-server&#34; &gt;Example 1: Testing a TCP/UDP Server
&lt;span&gt;
    &lt;a href=&#34;#example-1-testing-a-tcpudp-server&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Suppose you are developing a UDP server application, and you want to test its functionality. You can use netcat to send TCP/UDP packets to your server and observe its response. By monitoring the server&amp;rsquo;s behavior, you can ensure that it correctly handles incoming UDP traffic.&lt;/p&gt;
&lt;h3 id=&#34;example-2-interacting-with-networked-devices&#34; &gt;Example 2: Interacting with Networked Devices
&lt;span&gt;
    &lt;a href=&#34;#example-2-interacting-with-networked-devices&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Netcat can be handy when interacting with networked devices, such as routers, IoT devices, or even network-enabled printers. By establishing a TCP/UDP connection, you can send commands, queries, or configuration data to these devices, enabling you to troubleshoot or configure them remotely.&lt;/p&gt;
&lt;h3 id=&#34;example-3-banner-grabbing&#34; &gt;Example 3. Banner Grabbing
&lt;span&gt;
    &lt;a href=&#34;#example-3-banner-grabbing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;This is a technique used in network security to gather information about a remote server, including the type and version of the operating system and applications running. The basic concept is that you connect to a network service and see what kind of &amp;lsquo;banner&amp;rsquo; (if any) it returns in the output. When I was starting out in the IT world, this was a common thing to do to enumerate devices and services on a network. Though, I would like to believe this is no longer as much of a concern, given the simplicity of preventing this type of information discovery attack.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34; &gt;Conclusion
&lt;span&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Netcat&amp;rsquo;s ability to handle UDP connections makes it an invaluable tool for various network-related tasks. Whether you are testing a UDP server, interacting with networked devices, or exploring your network&amp;rsquo;s services, netcat provides a convenient and straightforward approach.&lt;/p&gt;
&lt;p&gt;In this blog post, we walked through the process of creating a UDP connection using netcat, discussed the fundamentals of UDP, and explored practical examples where netcat can prove useful. By mastering netcat&amp;rsquo;s capabilities, you can enhance your network troubleshooting and debugging skills, and gain a deeper understanding of UDP communication.&lt;/p&gt;
&lt;p&gt;You can read more about netcat in the man pages:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;man nc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The OpenBSD repository contains the original source written by Hobbit decades ago:
&lt;a href=&#34;https://github.com/openbsd/src/blob/master/usr.bin/nc/netcat.c&#34;&gt;netcat.c&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scheduled Kubernetes Worker Node Maintenance with Kured</title>
      <link>http://localhost:1313/posts/2022-07-15-scheduled-kubernetes-worker-node-maintenance-with-kured/</link>
      <pubDate>Fri, 15 Jul 2022 18:18:50 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2022-07-15-scheduled-kubernetes-worker-node-maintenance-with-kured/</guid>
      <description>&lt;p&gt;If you manage Linux nodes, you know how vital performing regular maintenance is. Installing software patches that modify Linux kernel headers requires a reboot. Normally, as in the past, we would cordon and drain the node and then manually reboot, wait for it to come back online, verify its health, and add it back to the cluster. That’s a lot of manual work! How can we automate this?&lt;/p&gt;
&lt;p&gt;Weaveworks created a great tool for simplifying these steps: Kured (the &lt;em&gt;&lt;strong&gt;Ku&lt;/strong&gt;bernetes &lt;strong&gt;Re&lt;/strong&gt;boot &lt;strong&gt;D&lt;/strong&gt;aemon&lt;/em&gt;). Let’s start by deploying Kured to our cluster.&lt;/p&gt;
&lt;p&gt;Kured can be deployed in one of several ways. In this article, we’ll focus on deploying it via Helm. This is the simplest and quickest way to get it running in our cluster.&lt;/p&gt;
&lt;p&gt;Follow these steps to install the Helm chart:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 1) Add the Kured Helm repository&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo add kured https://weaveworks.github.io/kured
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 2) Update your local Helm chart repository cache&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 3) Create a dedicated namespace where you would like to deploy kured&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create namespace kured
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 4) Install kured in that namespace with Helm 3 (only on Linux nodes)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm install kured kured/kured --namespace kured --set nodeSelector.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubernetes\.io/os&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If all went well with the command above, that’s it, you’re done! Have a nice day! 🙂&lt;/p&gt;
&lt;p&gt;If you want to test Kured, login to one of your Linux nodes, and install some patches with your package manager of choice (any patch that requires a reboot, typically patches that modify kernel headers). Then, check for a file named ‘reboot-required’ in /var/run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -lisa /var/run/reboot-required
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you installed patches, and this file does not exist, none of your patches require a reboot. We can still fake the system into thinking a reboot is required by manually creating the ‘reboot-required’ file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo touch /var/run/reboot-required
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2022/07/image-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then, we’ll use Kubetail to tail the logs of all our Kured pods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubetail -label kured --namespace kured
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2022/07/image-1024x749.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;By default, Kured checks for the existence of the sentinel file every 60 minutes. However, this behavior can be changed. See the github repo for more info:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/weaveworks/kured#reboot-sentinel-file--period&#34; alt=&#34;weaveworks/kured: Kubernetes Reboot Daemon&#34;&gt;&lt;/p&gt;
&lt;p&gt;Scheduling on the node should be disabled if you are within the Kured schedule&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2022/07/image-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now that the node is cordoned off, running pods on the node are drained, and the node is rebooted.&lt;/p&gt;
&lt;p&gt;That’s it for this article. Have a great day!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Docker in WSL v1</title>
      <link>http://localhost:1313/posts/2022-06-26-running-docker-in-wsl-v1/</link>
      <pubDate>Sun, 26 Jun 2022 15:00:28 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2022-06-26-running-docker-in-wsl-v1/</guid>
      <description>&lt;p&gt;I have somewhat of a niche issue, where I have no network connectivity while connecting to my work VPN inside of WSL v2. I have found others complaining about this issue on Github. Though no one seems to know how to fix it and I have not had the time to properly investigate.&lt;/p&gt;
&lt;p&gt;Because of this, I’m required to continue using WSL v1. Though, with WSL v1, Docker does not work. I receive this nice message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt; could not be found in this WSL &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; distro.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We recommend to convert this distro to WSL &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; and activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the WSL integration in Docker Desktop settings.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;See https://docs.docker.com/docker-for-windows/wsl/ &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; details.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So I’m in somewhat of a catch-22 here…&lt;/p&gt;
&lt;p&gt;To work around this problem until a proper solution is found, I was able to get Docker working with WSL v1.&lt;/p&gt;
&lt;p&gt;If you happen to be having a similar issue (and it seems like quite a few people are, considering the number of Github posts I found), just follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expose the Docker daemon in docker desktop settings:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2022/02/image-10-1024x585.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install the stand-alone Docker client in WSL v1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://download.docker.com/linux/static/stable/x86_64/docker-20.10.5.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar zxvf docker-20.10.5.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set the default Docker daemon in WSL v1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export DOCKER_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tcp://localhost:2375
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verify you can connect to Docker running on Windows from within WSL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./docker info
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is also beneficial in that you only have one Docker host to manage your containers, network, etc., rather than two.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remove Kubernetes Namespace Stuck in the Terminating State</title>
      <link>http://localhost:1313/posts/2022-06-04-remove-kubernetes-namespace-stuck-in-the-terminating-state/</link>
      <pubDate>Sat, 04 Jun 2022 18:29:41 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2022-06-04-remove-kubernetes-namespace-stuck-in-the-terminating-state/</guid>
      <description>&lt;p&gt;In this post, we will discuss how to remove a Kubernetes namespace that is stuck in the ‘terminating’ state.&lt;/p&gt;
&lt;p&gt;A namespace is like a container. You can use it to store related objects in a Kubernetes environment. Maybe you are hosting a blog in Kubernetes. This blog will likely have a database, a frontend website, a load balancer (service) to spread the incoming traffic among ‘x’ number of frontend containers (pods), and maybe some middle-tier or utility applications. One day, you decide you no longer want this blog, so you plan to delete it. Rather than tediously deleting all of the various entities associated with this blog, you can delete the namespace that contains these entities. This will essentially ‘cascade delete’ the resources within the namespace as well.&lt;/p&gt;
&lt;p&gt;After deleting the namespace for your blog, you notice that it still exists, but the state of it is ‘Terminating’, and it has been like this for a long time (hours or maybe even days).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://geekyryan.com/wp-content/uploads/2022/06/image.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes will occassionally fail to delete third-party resources when deleting a namespace, causing the namespace to linger. This can happen if the third-party API managing the resource is not responding to requests. To verify if any of these resources still exist, use this command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --show-all --ignore-not-found -n &amp;lt;terminating-namespace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you happen to see any resources in the output, you can try force deleting them and then try to delete the namespace again.&lt;/p&gt;
&lt;p&gt;In my experience, the majority of the time you will not find any resources still hanging around. Rather, the namespace will be completely empty. What is going on here?&lt;/p&gt;
&lt;p&gt;Let’s take a look at the namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;$ kubectl get namespace darn-c101 -o yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Namespace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;kubectl.kubernetes.io/last-applied-configuration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/metadata.name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;darn-c101&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;finalizers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;status&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;conditions&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; - &lt;span style=&#34;color:#f92672&#34;&gt;lastTransitionTime&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2022-06-01T19:05:31Z&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;message: &amp;#39;Some content in the namespace has finalizers remaining&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;darn-c101.geekyryan.io/finalizer in 1 resource instances&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;reason&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;SomeFinalizersRemain&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;status&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NamespaceFinalizersRemaining&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;phase&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Terminating&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the inclusion of the finalizers field in the above JSON. Some namespaces have a finalizer defined under spec.&lt;/p&gt;
&lt;p&gt;A finalizer is a special metadata key that tells Kubernetes to wait until a specific condition is met before it fully deletes a resource. Much like a finalizer in the .NET framework (does Java have those too? 😀 )&lt;/p&gt;
&lt;p&gt;So when you run a command like &lt;code&gt;kubectl delete namespace &amp;lt;namespace&amp;gt;&lt;/code&gt;, Kubernetes checks for a finalizer in the &lt;code&gt;metadata.finalizers&lt;/code&gt; field. If the resource defined in the finalizer cannot be deleted, then the namespace is not deleted either. This puts the namespace into a perpetual terminating state and is never actually deleted.&lt;/p&gt;
&lt;p&gt;When an object has been terminating for an excessive time, check its finalizers by inspecting the &lt;code&gt;metadata.finalizers&lt;/code&gt; field in its YAML.&lt;/p&gt;
&lt;p&gt;So we now know what the problem is. How can we solve it? Well, it’s actually quite simple. If you are using bash, use this script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;namespaces&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl get ns --field-selector&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;status.phase&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;Terminating -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{range .items[*]}{.metadata.name}{&amp;#34;\n&amp;#34;}{end}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$namespaces&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No namespaces to delete.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; namespace in $namespaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[Removing Namespace]: &lt;/span&gt;$namespace&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    kubectl get namespace $namespace -o json | tr -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/\&amp;#34;finalizers\&amp;#34;: \[[^]]\+\]/\&amp;#34;finalizers\&amp;#34;: []/&amp;#34;&lt;/span&gt; | kubectl replace --raw /api/v1/namespaces/$namespace/finalize -f - &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/rnemeth90/e83bb4c8808f0d28412cb40edb2487d3&#34;&gt;Delete Terminating Kubernetes Namespaces with Bash (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It will search for any namespace that is stuck in the terminating state and forcefully remove it by removing the finalizers field and then using &lt;code&gt; kubectl replace&lt;/code&gt; to commit the change back to the Kube API.&lt;/p&gt;
&lt;p&gt;If you prefer Powershell, you can use this script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$terminatingNamespaces = kubectl get ns --field-selector=status.phase==Terminating -o jsonpath=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{range .items[*]}{.metadata.name}{&amp;#39;\n&amp;#39;}{end}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ($ns &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; $terminatingNamespaces) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Write-Verbose &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[FOUND]: Forcefully removing $ns&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $jsonObj = kubectl get namespace $ns -o json | ConvertFrom-Json | foreach-object { $_.spec.finalizers = @(); $_ } |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    convertto-json | kubectl replace --raw /api/v1/namespaces/$namespace/finalize &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/rnemeth90/19d7de622a5009c1cf908c5d4deb5358&#34;&gt;Delete Terminating Kubernetes Namespaces with Powershell (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It does the same thing as the bash script, just in more of a Window-zy way.&lt;/p&gt;
&lt;p&gt;It’s that simple. I hope this was helpful. If you have any questions, comments, or concerns, please feel free to reach out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure VM Scale Set &amp;#8211; Get Instance IP Address</title>
      <link>http://localhost:1313/posts/2020-11-19-azure-vm-scale-set-get-instance-ip/</link>
      <pubDate>Thu, 19 Nov 2020 18:07:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2020-11-19-azure-vm-scale-set-get-instance-ip/</guid>
      <description>&lt;p&gt;If you are using VM Scale Sets in Azure, you know how important it can be to quickly obtain an instance IP address. This can of course be done using the Azure Portal. However, I am often working in a shell or VSCode, and I do not want to leave the comfort of my shell to login to the portal.&lt;/p&gt;
&lt;p&gt;There are a few options we have for retrieving information about a VMSS and its instances without using the Azure Portal. We can use PowerShell or the Azure CLI. Being that I am constantly flipping between Windows and Linux, I will detail both here.&lt;/p&gt;
&lt;p&gt;You will need to have the AZ module installed. To install this module, simple open PowerShell (as admin) and type in “Install-Module -Name az”. To get the IP address of the instances within a scale set, use the following script:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rnemeth90/Get-VmssInstanceIpAddress&#34;&gt;https://github.com/rnemeth90/Get-VmssInstanceIpAddress&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also use the Azure CLI to obtain individual instance IP addresses. This method is much simpler than PowerShell, and only requires one line of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az vmss nic list –resource-group myResourceGroup –vmss-name myVmss | grep –w “privateIpAddress”
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Reset GRUB/root Password for vCenter/PSC Appliance</title>
      <link>http://localhost:1313/posts/2020-10-31-reset-grubroot-password-for-vcenterpsc/</link>
      <pubDate>Sat, 31 Oct 2020 01:22:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2020-10-31-reset-grubroot-password-for-vcenterpsc/</guid>
      <description>&lt;p&gt;In Redhat/Fedora/Cent, GRUB can be protected by running the grub-md5-crypt command and pasting the outputted password hash into the grub.conf file. vSphere 6.0 password protects grub by default. If you change the root password in the VAMI, the GRUB password is changed to match. If you do not change the root password, the GRUB password is “vmware”.&lt;/p&gt;
&lt;p&gt;To reset the GRUB password, we need to boot into a Cent or Redhat live CD. The ISO can be obtained here: &lt;a href=&#34;https://www.centos.org/download/&#34;&gt;https://www.centos.org/download/&lt;/a&gt;. Its best to upload the ISO to a datastore that the appliance has access to.&lt;/p&gt;
&lt;p&gt;Stop the appliance and attach the ISO:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Be sure to select the “Connect at Power On” option. Boot the VM into the ISO and select the “Troubleshooting” option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-1.png&#34; alt=&#34;&#34;&gt;
Next, choose “Rescure a Red hat (or CentOS depending on your ISO) Enterprise Linux System”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select “Continue” to mount the VCSA 6.0’s root filesystem in Read/write mode under /mnt/sysimage. RHEL 7.2 is capable to detect the VCSA’s root volume and mounts it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The VCSA root filesystem is mounted under /mnt/sysimage and you can now access (and modify) it using the shell. Navigate to /mnt/sysimage/boot and list the contents. You’ll see we now have access to the grub directory:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;cd to the grub directory and list the contents. Look for a file called “menu.lst”. This file holds the grub boot loader password. Open this file with vi by typing “vi menu.lst”. Navigate to the line beginning with “password” using the arrow keys, and then type “dd” to remove the line.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-5.png&#34; alt=&#34;&#34;&gt;
You can then save the file by pressing “:wq” (without quotes). You can now cat the file and see that the password has been removed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Exit the shell (this will reboot the server). Detach the ISO and boot the appliance. Once the system is booted, stop the VCSA in the GRUB menu (by pressing the escape key during boot) to break the OS root password.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-7.png&#34;&gt;&lt;/a&gt;
Press “e” to edit the boot commands for the kernel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Append “init=/bin/bash” to the line in this step and press enter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Press “b” to boot the system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You will now boot into a bash shell where you can set the root password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2020/10/image-11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once this is done, exit the shell by typing “exit”. You can now boot the appliance and login with your new root password.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ping Sweeping with FPing</title>
      <link>http://localhost:1313/posts/2015-03-09-ping-sweeping-with-fping/</link>
      <pubDate>Mon, 09 Mar 2015 01:08:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2015-03-09-ping-sweeping-with-fping/</guid>
      <description>&lt;p&gt;I generally use NMAP for any type of host discovery, but recently started experimenting with FPing. One thing I found is that, when performing a ping sweep, not only do I see the hosts that replied to the ping, but FPing also sends any unreachable IP addresses to stdout (which is super annoying and ugly if you ask me…).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/03/2015-03-08_21h04_50.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/03/2015-03-08_21h04_50.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anyway, after a bit of research, I found a nifty way to suppress these messages. Linux allows us to redirect all error messages to /dev/null. So instead of just running the vanilla fping -a -g…. you would run the program and output all error messages /dev/null, like so:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/03/2015-03-08_21h07_14.png&#34;&gt;&lt;img src=&#34;https://rnemeth90.github.io/wp-content/uploads/2015/03/2015-03-08_21h07_14.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
