<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx-Ingress on GeekyRyan</title>
    <link>https://rnemeth90.github.io/tags/nginx-ingress/</link>
    <description>GeekyRyan (Nginx-Ingress)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Dec 2023 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://rnemeth90.github.io/tags/nginx-ingress/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx Ingress Response Header Size - A Cautionary Tale</title>
      <link>https://rnemeth90.github.io/posts/2023-12-04-nginx-ingress-resp-header-size/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2023-12-04-nginx-ingress-resp-header-size/</guid>
      <description>&lt;p&gt;This will be a short post about a recent issue I encountered when using Nginx as a Kubernetes ingress. Though, this could also be encountered when using Nginx as a reverse proxy as well. The two definitions are functionally similar.&lt;/p&gt;
&lt;p&gt;We recently had a client call in complaining of our application returning random 502s (Bad Gateway).&lt;/p&gt;
&lt;p&gt;After some investigation and the common finger-pointing, I found this entry in the logs of our ingress controllers:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;note&lt;/em&gt; this log entry is truncated&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[error] 193#193: 
    *25 upstream sent too big header while reading response header from upstream
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This error message pointed towards a limitation in Nginx&amp;rsquo;s default configuration - it struggles with large headers. This is a known quirk of Nginx, contrasting with some other web servers that can handle larger headers by default.&lt;/p&gt;
&lt;p&gt;We later found that this client&amp;rsquo;s large HTTP headers were due to a large content security policy header.&lt;/p&gt;
&lt;p&gt;The solution seemed straightforward: increase the buffer size in Nginx to accommodate larger headers. For a typical Nginx setup, this could be achieved by tweaking the configuration file:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;proxy_buffers 8 16k;  # 8 buffers of 16k each
proxy_buffer_size 16k; # 16k for headers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, the situation gets a bit more complex when dealing with Nginx as an ingress controller in a Kubernetes environment.&lt;/p&gt;
&lt;h3 id=&#34;configuring-nginx-ingress-controller&#34; &gt;Configuring Nginx Ingress controller
&lt;span&gt;
    &lt;a href=&#34;#configuring-nginx-ingress-controller&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Fortunately, the Nginx Ingress controller is designed to cater to such customizations. It allows configuration changes through a Kubernetes ConfigMap, which maps to Nginx&amp;rsquo;s internal settings. To adjust the buffer size, you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deploy a ConfigMap with your desired settings, or add entries to an existing ConfigMap. For example, setting proxy-buffer-size to &amp;ldquo;16k&amp;rdquo; to handle larger headers:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: kube-system
data:
  proxy-buffer-size: &amp;#34;16k&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If creating a new ConfigMap, you will need to tell Nginx pods to read it. This involves passing the name of your ConfigMap as an argument in your deployment configuration:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;args:
  - /nginx-ingress-controller
  - --configmap=$(POD_NAMESPACE)/nginx-configuration
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the ConfigMap is in place, the Nginx pods will pickup and apply the new settings&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
