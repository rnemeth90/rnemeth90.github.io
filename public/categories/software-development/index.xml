<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Development on GeekyRyan</title>
    <link>https://rnemeth90.github.io/categories/software-development/</link>
    <description>Recent content in Software Development on GeekyRyan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://rnemeth90.github.io/categories/software-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Golang App with Github Actions</title>
      <link>https://rnemeth90.github.io/posts/2022-12-24-gh-actions-copy/</link>
      <pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2022-12-24-gh-actions-copy/</guid>
      <description>In this article, we&amp;rsquo;ll take a quick look at building a Golang app with Github actions. This process can be applied to just about any app written in any language though. We&amp;rsquo;ll cover the following:
 What are github actions? Setting up the workflow to build, test, and deploy a binary  Github Actions is a cross-platform CI/CD pipeline that allows you to build, test, package, and release your software. Actions can be triggered manually or based on events that happen within your Github repo.</description>
    </item>
    
    <item>
      <title>Chaining YAML Pipelines in Azure Devops</title>
      <link>https://rnemeth90.github.io/posts/2022-11-03-chaining-yaml-pipelines-in-azure-devops-copy/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2022-11-03-chaining-yaml-pipelines-in-azure-devops-copy/</guid>
      <description>In this article, we&amp;rsquo;ll take a quick look at chaining two pipelines together in Azure Devops, so that the completion of one pipeline, triggers the other to run. Microsoft documentation is leaps and bounds ahead of where it used to be. However, I still feel like there is a lot of room for improvement, as it took me a while to figure this out.
Our two pipelines will exist in the same repository.</description>
    </item>
    
    <item>
      <title>Update Azure Devops SPN Secret</title>
      <link>https://rnemeth90.github.io/posts/2022-09-12-update-azure-devops-spn-secret/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2022-09-12-update-azure-devops-spn-secret/</guid>
      <description>If you need to update the secret for a service principal in Azure Devops, prior to it expiring, you may be surprised to find that this cannot be done via the Azure Portal.
In this article, I&amp;rsquo;ll show you two methods for updating a secret for a service principal prior to expiration.
Update the secret via the Azure Devops Portal:  Go to &amp;ldquo;Service Connections&amp;rdquo; in the Azure Devops portal Find the SPN you want to update, then click &amp;ldquo;Manage Service Principal&amp;rdquo; Then on the service principal page, click Certificates &amp;amp; Secrets Create a &amp;ldquo;New Client Secret&amp;rdquo;, take note of the value Delete the &amp;lsquo;old&amp;rsquo; secret Return to the Service Connection in the Azure Devops portal Click Edit - click the verify button.</description>
    </item>
    
    <item>
      <title>Use “replace” in go.mod to Point to a Local Module</title>
      <link>https://rnemeth90.github.io/posts/2022-09-06-go-mod-replace-copy/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2022-09-06-go-mod-replace-copy/</guid>
      <description>If you want to the local version of a dependency in Go rather than one in a remote repository, use the replace keyword.
The replace line goes above your require statements, like so:
module github.com/rnemeth90/foo replace github.com/rnemeth90/bar =&amp;gt; /Users/rnemeth90/Projects/bar require ( github.com/rnemeth90/bar v1.0.0 ) Now when you compile this module go build or go install, it will use your local code rather than the remote dependency.
According to the docs, you do need to make sure that the code you’re pointing to also has a go.</description>
    </item>
    
    <item>
      <title>Powershell for Devops - Querying REST APIs with Powershell</title>
      <link>https://rnemeth90.github.io/posts/2022-08-04-querying-rest-with-powershell/</link>
      <pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2022-08-04-querying-rest-with-powershell/</guid>
      <description>This will be a short post on querying REST APIs with Powershell.
It&amp;rsquo;s hard to argue that REST APIs are the predominant technology for interacting with networked services. They provide a gateway for interacting with a 3rd party (or self-hosted) product without having to go through the exercise of a more complicated integration. REST APIs communicate in a common format, typically JSON. However, most will allow us to choose the response format by specifying an option in the &amp;lsquo;Accept&amp;rsquo; header.</description>
    </item>
    
    <item>
      <title>Reading Json Files with Go</title>
      <link>https://rnemeth90.github.io/posts/2022-07-21-reading-json-files-with-go/</link>
      <pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rnemeth90.github.io/posts/2022-07-21-reading-json-files-with-go/</guid>
      <description>JSON is a widely used format for representing structured data. Developers like it because it is easy to read, most common languages have a library for interacting with it, and most public APIs accept JSON in HTTP requests.
In this post, we&amp;rsquo;ll look at parsing a JSON file using Go! We will be using the io/ioutil package to open a json file on local disk, and encoding/json to parse the JSON data within the file into a memory structure.</description>
    </item>
    
  </channel>
</rss>
