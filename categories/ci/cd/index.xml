<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on GeekyRyan</title><link>https://rnemeth90.github.io/categories/ci/cd/</link><description>Recent content in CI/CD on GeekyRyan</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 19 Feb 2022 16:02:50 +0000</lastBuildDate><atom:link href="https://rnemeth90.github.io/categories/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Accessing Secrets Securely in Azure DevOps Pipelines</title><link>https://rnemeth90.github.io/posts/2022-02-19-accessing-secrets-ecurely-in-azure-devops-pipelines/</link><pubDate>Sat, 19 Feb 2022 16:02:50 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-02-19-accessing-secrets-ecurely-in-azure-devops-pipelines/</guid><description>&lt;p&gt;This post will cover a secure method for accessing secrets in Azure DevOps pipelines.&lt;/p&gt;
&lt;h2 id="why-azure-key-vault"&gt;
 Why Azure Key Vault?
 &lt;a class="heading-link" href="#why-azure-key-vault"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Azure Key Vault is an Azure cloud service used to securely store secrets, keys, and certificates. A secret can be any string of characters, such as API keys, passwords, URLs, etc. Azure Key Vault encrypts data at rest and in transit using HTTPS. Depending on the type of Key Vault you are using, data at rest is encrypted using software encryption (AES 256) or HSM-backed keys.&lt;/p&gt;</description></item><item><title>Continuous Deployment Models</title><link>https://rnemeth90.github.io/posts/2022-01-14-continuous-deployment-models/</link><pubDate>Fri, 14 Jan 2022 19:24:01 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-01-14-continuous-deployment-models/</guid><description>&lt;p&gt;When deploying new software releases to servers or (insert -as-a-service&amp;gt; here), it’s a good idea to either deploy the releases in a controlled manner or to have a quick rollback plan. This article will be diving into blue/green deployments, canary deployments, ring-based deployments, and feature tag deployments.&lt;/p&gt;
&lt;h2 id="bluegreen-deployments"&gt;
 Blue/Green Deployments
 &lt;a class="heading-link" href="#bluegreen-deployments"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Blue/green deployments are a deployment model where a new application version never gets deployed to the production servers (green) directly. Instead, it gets deployed to another set of servers (blue) first. Since the blue servers are not currently serving any traffic for users, the deployment has no impact. However, once the deployment has been completed successfully and tested, users will be directed to the new deployment (blue). You can control all user traffic or a subset of user traffic if your load balancer supports it (referred to as ‘Progressive Exposure’).&lt;/p&gt;</description></item></channel></rss>