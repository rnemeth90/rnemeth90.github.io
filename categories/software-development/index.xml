<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Development on GeekyRyan</title><link>https://rnemeth90.github.io/categories/software-development/</link><description>Recent content in Software Development on GeekyRyan</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 27 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://rnemeth90.github.io/categories/software-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Detecting MIME Types in Go</title><link>https://rnemeth90.github.io/posts/2024-03-27-golang-detect-file-type/</link><pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2024-03-27-golang-detect-file-type/</guid><description>&lt;h1 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Knowing the type of a file you&amp;rsquo;re working with is not just a matter of curiosity — it&amp;rsquo;s often a necessity. This is especially true when you&amp;rsquo;re deciding whether or not a particular operation can be carried out on that file. Go, with its comprehensive standard library, offers a straightforward approach to identifying a file&amp;rsquo;s MIME type, ensuring that developers have the tools they need to make informed decisions about file manipulation. You may expect to find this functionality in the &lt;code&gt;file&lt;/code&gt; package, but you&amp;rsquo;d be wrong! Read on&amp;hellip;&lt;/p&gt;</description></item><item><title>Validating URLs with Go</title><link>https://rnemeth90.github.io/posts/2023-12-12-golang-url-validation/</link><pubDate>Tue, 19 Dec 2023 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2023-12-12-golang-url-validation/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll take a quick look at URL validation using Golang. It&amp;rsquo;s common to implement URL validation as a task within a HTTP request pipeline, typically as middleware. There are many different definitions of &amp;ldquo;validation&amp;rdquo;. For the purpose of this article, we will simply validate that a URL conforms to a particular text pattern.&lt;/p&gt;
&lt;p&gt;I often see people (mistakenly) use URL and URI interchangeably. URL is actually is a sub-type of URI. A URL is a reference to a web resource, typically seen as a web address (e.g. &lt;a href="https://golang.org/project/%29" class="external-link" target="_blank" rel="noopener"&gt;https://golang.org/project/)&lt;/a&gt;. A URI, on the other hand, can be used to identify any type of resource, not just those on the internet.&lt;/p&gt;</description></item><item><title>Using try/catch/finally Blocks in PowerShell</title><link>https://rnemeth90.github.io/posts/2023-08-15-powershell-try-catch/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2023-08-15-powershell-try-catch/</guid><description>&lt;p&gt;Despite being a great language, PowerShell is not impervious to errors. Errors that occur within your code can stop it&amp;rsquo;s execution or even cause unexpected changes in the resources that your script is managing. Learning to handle these errors gracefully is the foundation of defensive coding. Today, we&amp;rsquo;ll take a quick look at how PowerShell handles errors with Try-Catch-Finally blocks. They allow you to gracefully handle errors and perform cleanup operations, ensuring that your script doesn&amp;rsquo;t crash when the unexpected occurs. We&amp;rsquo;ll then cover the differences in terminating and non-terminating errors and why you should take these into consideration when implementing error handling.&lt;/p&gt;</description></item><item><title>Golang: When Identical Strings are Not Equal</title><link>https://rnemeth90.github.io/posts/2023-01-24-golang-strings-not-equal/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2023-01-24-golang-strings-not-equal/</guid><description>&lt;p&gt;&lt;em&gt;This will be a quick and dirty post, so please forgive any spelling/grammar mistakes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I was writing a little CLI tool in Golang to track todo items. Just a dumb little app to help hone my skills a bit, but still something useful that serves a purpose to me. I don&amp;rsquo;t write a ton of code at work (mostly just scripting/pipelines when I do), so I&amp;rsquo;m constantly working on something like this in my spare time. Anyway, I was writing this app, got everything working like I wanted it to. I then wrote some of the tests and was iterating over them. I noticed the &lt;code&gt;ListTasks&lt;/code&gt; test was failing:&lt;/p&gt;</description></item><item><title>Handling Graceful Shutdown in a .NET App Hosted in Kubernetes</title><link>https://rnemeth90.github.io/posts/2022-12-28-graceful-shutdown-in-kubernetes-dotnet-pod/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-12-28-graceful-shutdown-in-kubernetes-dotnet-pod/</guid><description>&lt;p&gt;I was recently involved with troubleshooting some API&amp;rsquo;s hosted in Kubernetes throwing http/502&amp;rsquo;s. This was incredibly difficult to diagnose because it seemingly happened at random, and I had never encountered anything like this. Being that I had never dealt with this in the past, and I (nor my team) was able to figure it out within a reasonable amount of time, I turned to google. My searches resulted in various blogs and SO posts of other people experiencing similar issues, but none of their resolutions worked for us. It was actually a combination of these blogs (and the resolutions posted) that ended up resolving our issue.&lt;/p&gt;</description></item><item><title>Building a Golang App with Github Actions</title><link>https://rnemeth90.github.io/posts/2022-12-24-gh-actions-copy/</link><pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-12-24-gh-actions-copy/</guid><description>&lt;p&gt;In this article, we&amp;rsquo;ll take a quick look at building a Golang app with Github actions. This process can be applied to just about any app
written in any language though. We&amp;rsquo;ll cover the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What are github actions?&lt;/li&gt;
&lt;li&gt;Setting up the workflow to build, test, and deploy a binary&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Github Actions is a cross-platform CI/CD pipeline that allows you to build, test, package, and release your software. Actions can be triggered manually or based on events that happen within your Github repo. They are powerful and I suggest you read more at the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions" class="external-link" target="_blank" rel="noopener"&gt;Official Docs&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Chaining YAML Pipelines in Azure Devops</title><link>https://rnemeth90.github.io/posts/2022-11-03-chaining-yaml-pipelines-in-azure-devops-copy/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-11-03-chaining-yaml-pipelines-in-azure-devops-copy/</guid><description>&lt;p&gt;In this article, we&amp;rsquo;ll take a quick look at chaining two pipelines together in Azure Devops, so that the completion of one pipeline, triggers the other to run.
Microsoft documentation is leaps and bounds ahead of where it used to be. However, I still feel like there is a lot of room for improvement, as it took me a while to
figure this out.&lt;/p&gt;
&lt;p&gt;Our two pipelines will exist in the same repository. We have a dependent-pipeline, that we only want to run once the source-pipeline is finished. This is useful if you have
some infrastructure you want to build, prior to deploying something to that infrastructure.&lt;/p&gt;</description></item><item><title>Update Azure Devops SPN Secret</title><link>https://rnemeth90.github.io/posts/2022-09-12-update-azure-devops-spn-secret/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-09-12-update-azure-devops-spn-secret/</guid><description>&lt;p&gt;If you need to update the secret for a service principal in Azure Devops, prior to it expiring, you may be surprised to find that this cannot be done via the Azure Portal.&lt;/p&gt;
&lt;p&gt;In this article, I&amp;rsquo;ll show you two methods for updating a secret for a service principal prior to expiration.&lt;/p&gt;
&lt;h1 id="update-the-secret-via-the-azure-devops-portal"&gt;
 Update the secret via the Azure Devops Portal:
 &lt;a class="heading-link" href="#update-the-secret-via-the-azure-devops-portal"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Go to &amp;ldquo;Service Connections&amp;rdquo; in the Azure Devops portal&lt;/li&gt;
&lt;li&gt;Find the SPN you want to update, then click &amp;ldquo;Manage Service Principal&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Then on the service principal page, click Certificates &amp;amp; Secrets&lt;/li&gt;
&lt;li&gt;Create a &amp;ldquo;New Client Secret&amp;rdquo;, take note of the value&lt;/li&gt;
&lt;li&gt;Delete the &amp;lsquo;old&amp;rsquo; secret&lt;/li&gt;
&lt;li&gt;Return to the Service Connection in the Azure Devops portal&lt;/li&gt;
&lt;li&gt;Click Edit - click the verify button. It should tell you the client certificate has expired&lt;/li&gt;
&lt;li&gt;Now you need to make an arbitrary change and save it. I just type a character in the optional description and save.&lt;/li&gt;
&lt;li&gt;Now edit again and click verify, it will now pick up the new client secret and all is happy.&lt;/li&gt;
&lt;li&gt;You can now remove whatever you added to the description.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Use “replace” in go.mod to Point to a Local Module</title><link>https://rnemeth90.github.io/posts/2022-09-06-go-mod-replace-copy/</link><pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-09-06-go-mod-replace-copy/</guid><description>&lt;p&gt;If you want to the local version of a dependency in Go rather than one in a remote repository, use the &lt;em&gt;replace&lt;/em&gt; keyword.&lt;/p&gt;
&lt;p&gt;The replace line goes above your require statements, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; module github.com/rnemeth90/foo
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; replace github.com/rnemeth90/bar &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/rnemeth90/Projects/bar
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; require &lt;span class="o"&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 	github.com/rnemeth90/bar v1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when you compile this module &lt;em&gt;go build&lt;/em&gt; or &lt;em&gt;go install&lt;/em&gt;, it will use your local code rather than the remote dependency.&lt;/p&gt;</description></item><item><title>Powershell for Devops - Querying REST APIs with Powershell</title><link>https://rnemeth90.github.io/posts/2022-08-04-querying-rest-with-powershell/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-08-04-querying-rest-with-powershell/</guid><description>&lt;p&gt;This will be a short post on querying REST APIs with Powershell.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s hard to argue that REST APIs are the predominant technology for interacting
with networked services. They provide a gateway for interacting with a 3rd party (or self-hosted)
product without having to go through the exercise of a more complicated integration. REST APIs communicate
in a common format, typically JSON. However, most will allow us to choose the response format by specifying an
option in the &amp;lsquo;Accept&amp;rsquo; header. Most languages provide a native method for interacting with
REST APIs. This objective for this post is to show you how simple this is with Powershell.&lt;/p&gt;</description></item><item><title>Reading Json Files with Go</title><link>https://rnemeth90.github.io/posts/2022-07-21-reading-json-files-with-go/</link><pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate><guid>https://rnemeth90.github.io/posts/2022-07-21-reading-json-files-with-go/</guid><description>&lt;p&gt;JSON is a widely used format for representing structured data. Developers like it because it is easy to read, most common languages have a library for interacting
with it, and most public APIs accept JSON in HTTP requests.&lt;/p&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll look at parsing a JSON file using Go! We will be using the io/ioutil package to open a json file on local disk, and encoding/json to parse the
JSON data within the file into a memory structure.&lt;/p&gt;</description></item></channel></rss>